import{_ as s,c as e,o as a,a6 as t}from"./chunks/framework.CHl2ywxc.js";const c=JSON.parse('{"title":"Phase 5: Core Master Server — Research & Design Analysis","description":"","frontmatter":{},"headers":[],"relativePath":"research/phase5-analysis.md","filePath":"research/phase5-analysis.md","lastUpdated":1755281500000}'),l={name:"research/phase5-analysis.md"};function n(r,i,o,h,p,d){return a(),e("div",null,i[0]||(i[0]=[t(`<h1 id="phase-5-core-master-server-—-research-design-analysis" tabindex="-1">Phase 5: Core Master Server — Research &amp; Design Analysis <a class="header-anchor" href="#phase-5-core-master-server-—-research-design-analysis" aria-label="Permalink to &quot;Phase 5: Core Master Server — Research &amp; Design Analysis&quot;">​</a></h1><p>This document analyzes Phase 5 of the Master MCP Server, focused on implementing a complete MCP protocol handler and wiring together all major subsystems from Phases 1–4 into a production-ready master server. It is grounded in the current codebase and the project plan in <code>master-mcp-definition.md</code>.</p><p>Contents</p><ul><li>Overview and Goals</li><li>MCP Protocol Compliance</li><li>Protocol Handler Design</li><li>Master Server Integration</li><li>Configuration Management</li><li>Lifecycle &amp; Graceful Shutdown</li><li>Error Handling Strategy</li><li>Performance Considerations</li><li>Monitoring &amp; Observability</li><li>Cross‑Platform Compatibility (Node &amp; Workers)</li><li>Testing Strategy</li><li>Suggested Implementation Outline</li></ul><hr><h2 id="overview-and-goals" tabindex="-1">Overview and Goals <a class="header-anchor" href="#overview-and-goals" aria-label="Permalink to &quot;Overview and Goals&quot;">​</a></h2><p>Phase 5 brings the system together:</p><ul><li>Implement a complete MCP Protocol Handler that supports tool and resource operations and integrates authentication.</li><li>Wire MultiAuthManager, ModuleLoader, CapabilityAggregator, and RequestRouter into a cohesive Master Server.</li><li>Establish a robust initialization and shutdown sequence with configuration loading and validation.</li><li>Ensure errors and auth flows propagate correctly through all layers, with attention to performance and observability.</li></ul><p>Key objectives:</p><ul><li>Single cohesive entry point for MCP clients with aggregated capabilities across backends.</li><li>Strict separation of concerns: discovery (aggregator), routing (router), auth (multi‑auth), lifecycle (loader/server), protocol (handler).</li><li>Cross‑platform design that compiles and runs on Node.js and Worker runtimes (Workers, Koyeb, Docker).</li></ul><hr><h2 id="mcp-protocol-compliance" tabindex="-1">MCP Protocol Compliance <a class="header-anchor" href="#mcp-protocol-compliance" aria-label="Permalink to &quot;MCP Protocol Compliance&quot;">​</a></h2><p>Phase 5 requires finishing the protocol surface for the master server. Within this repo we maintain minimal MCP‑like types in <code>src/types/mcp.ts</code>:</p><ul><li>Tools: <code>list_tools</code>, <code>call_tool</code></li><li>Resources: <code>list_resources</code>, <code>read_resource</code></li><li>Subscriptions/notifications: <code>subscribe</code> (stub in router)</li></ul><p>Compliance guidance:</p><ul><li>Initialization handshake (JSON‑RPC “initialize”): expose server name/version and capabilities. The master server can synthesize this response from the <code>CapabilityAggregator</code> once discovery completes. If running over HTTP rather than JSON‑RPC, provide <code>/capabilities</code> with a compatible JSON body (already supported by the aggregator’s discovery flow).</li><li>Tools <ul><li><code>list_tools</code> returns aggregated tool definitions. Names must be globally unique. Use the existing prefixing strategy (<code>serverId.toolName</code>).</li><li><code>call_tool</code> accepts aggregated names; the ProtocolHandler must resolve these to <code>{serverId, originalName}</code> via <code>CapabilityAggregator.getMappingForTool</code>, falling back to split‑by‑dot as a compatibility path.</li></ul></li><li>Resources <ul><li><code>list_resources</code> returns aggregated resource descriptors with prefixed URIs (e.g., <code>serverA.db.users</code>).</li><li><code>read_resource</code> accepts aggregated URIs and resolves them via the aggregator mapping.</li></ul></li><li>Prompts (optional) <ul><li>If backends report prompts in capabilities, include them in the master’s capabilities (even if the handler does not yet implement prompt RPCs). This prepares us for future <code>prompts/list</code> and <code>prompts/get</code> support.</li></ul></li><li>Subscriptions/Events <ul><li><code>subscribe</code> is scaffolded in the current router and can return <code>{ ok: true }</code>. True event streaming would arrive in later phases.</li></ul></li></ul><p>Error semantics and shapes should follow JSON‑RPC codes when the transport is JSON‑RPC, and the simplified result objects in <code>types/mcp.ts</code> when using HTTP. Recommended mapping:</p><ul><li>Invalid request/params → JSON‑RPC <code>-32600 / -32602</code> (HTTP 400 in REST‑style endpoints).</li><li>Method not found → <code>-32601</code> (HTTP 404).</li><li>Upstream/network failure → <code>-32000</code> range with details (HTTP 502/504 depending on context).</li><li>Circuit open or delegation required → structured error content in <code>CallToolResult</code>/<code>ReadResourceResult</code> for REST; JSON‑RPC error with well‑known <code>code</code> and <code>data</code> fields otherwise.</li></ul><hr><h2 id="protocol-handler-design" tabindex="-1">Protocol Handler Design <a class="header-anchor" href="#protocol-handler-design" aria-label="Permalink to &quot;Protocol Handler Design&quot;">​</a></h2><p>File: <code>src/server/protocol-handler.ts</code></p><p>Responsibilities:</p><ul><li>Validate incoming requests and extract auth context (client bearer token) via a small helper.</li><li>Integrate with <code>CapabilityAggregator</code> for capability discovery and name/URI mapping.</li><li>Delegate actual backend communication to <code>RequestRouter</code>, which handles load balancing, retries, and circuit breakers.</li><li>Normalize errors and, when applicable, surface OAuth delegation responses from <code>MultiAuthManager</code> (via the router’s auth hook).</li></ul><p>Key methods and behavior:</p><ul><li><code>handleListTools(req) → ListToolsResult</code><ul><li>Return <code>aggregator.getAllTools()</code> results directly; no auth required unless policy dictates.</li></ul></li><li><code>handleCallTool(req) → CallToolResult</code><ul><li>Extract <code>clientToken</code> (if present) from request metadata/headers.</li><li>Let <code>RequestRouter.routeCallTool(req, clientToken)</code> perform mapping, auth, and forwarding.</li><li>If <code>OAuthDelegation</code> is required, the router currently returns an error‑shaped <code>content</code> object. Document this contract and keep behavior consistent.</li></ul></li><li><code>handleListResources(req) → ListResourcesResult</code><ul><li>Return <code>aggregator.getAllResources()</code> results directly.</li></ul></li><li><code>handleReadResource(req) → ReadResourceResult</code><ul><li>Extract <code>clientToken</code>; call <code>router.routeReadResource(req, clientToken)</code>.</li></ul></li><li><code>handleSubscribe(req) → SubscribeResult</code><ul><li>Return <code>{ ok: true }</code> for now; future phases may wire real notifications.</li></ul></li></ul><p>Auth extraction and validation:</p><ul><li>For HTTP transports, extract <code>Authorization: Bearer &lt;token&gt;</code> from request headers (the server framework should pass this into the handler). For JSON‑RPC, carry auth in a well‑defined <code>meta</code> block alongside the request.</li><li>If a token is present, <code>MultiAuthManager.validateClientToken</code> can be consulted for basic validation; actual per‑backend auth preparation happens inside the router via its <code>getAuthHeaders</code> provider.</li></ul><p>Input validation:</p><ul><li>Verify required fields: <code>name</code> for <code>call_tool</code>, <code>uri</code> for <code>read_resource</code>.</li><li>Enforce type checks on <code>arguments</code> if schemas are available (schemas are optional in <code>types/mcp.ts</code>).</li><li>Consistently reject invalid requests with clear error messages and codes.</li></ul><p>Threading and concurrency:</p><ul><li>The ProtocolHandler is stateless beyond its dependencies; it is safe to reuse a single instance.</li><li>Avoid Node‑only APIs in handler logic; rely on <code>fetch</code>‑based router and pure TypeScript utilities.</li></ul><hr><h2 id="master-server-integration" tabindex="-1">Master Server Integration <a class="header-anchor" href="#master-server-integration" aria-label="Permalink to &quot;Master Server Integration&quot;">​</a></h2><p>File: <code>src/server/master-server.ts</code></p><p>The current implementation already wires a significant portion:</p><ul><li>Constructs <code>DefaultModuleLoader</code>, <code>CapabilityAggregator</code>, <code>RequestRouter</code> and a <code>ProtocolHandler</code> placeholder.</li><li>Exposes <code>startFromConfig</code>, <code>loadServers</code>, <code>discoverAllCapabilities</code>, and <code>setAuthHeaderProvider</code> to integrate auth strategies.</li><li>Provides health checks and unload/restart helpers.</li></ul><p>To complete Phase 5:</p><ul><li>Inject all dependencies into <code>ProtocolHandler</code> so it can call into the router and aggregator consistently.</li><li>Integrate <code>MultiAuthManager</code> by setting an auth header provider: <ul><li><code>masterServer.setAuthHeaderProvider((serverId, clientToken) =&gt; multiAuth.prepareAuthForBackend(serverId, clientToken))</code></li><li>This enables delegate/proxy flows and pass‑through master auth.</li></ul></li><li>Initialization sequence: <ol><li>Load and validate configuration (<code>ConfigLoader</code>).</li><li>Initialize <code>MultiAuthManager</code> with <code>master_oauth</code> config and register per‑server auth strategies from <code>servers[].auth_strategy</code> and <code>servers[].auth_config</code>.</li><li>Load all servers via <code>DefaultModuleLoader.loadServers()</code>.</li><li>Discover capabilities via <code>CapabilityAggregator.discoverCapabilities()</code>.</li><li>Create <code>RequestRouter</code> with routing policy from <code>config.routing</code>.</li><li>Create <code>ProtocolHandler</code> with injected aggregator, router, multi‑auth, and set up request handlers in the hosting layer (HTTP/JSON‑RPC adapter).</li><li>Start background health monitoring (periodic <code>performHealthChecks</code>).</li></ol></li><li>Lifecycle hooks: <ul><li>On configuration reloads, re‑run discovery and call <code>RequestRouter</code>’s internal <code>RouteRegistry.updateServers</code> (currently done via constructor on re‑instantiation; a light wrapper can propagate updates without rebuilds if desired).</li><li>On shutdown, call <code>unloadAll()</code> and ensure outstanding requests finish within a deadline.</li></ul></li></ul><p>Integration with hosting layer:</p><ul><li>Node (Express/Fastify): map HTTP endpoints to protocol methods (e.g., <code>/mcp/tools/list</code>, <code>/mcp/tools/call</code>, <code>/mcp/resources/list</code>, <code>/mcp/resources/read</code>, <code>/capabilities</code>, <code>/health</code>). Propagate <code>Authorization</code> header to the handler so the router can prepare backend auth.</li><li>Workers: implement a <code>fetch()</code> handler that routes requests to the same handler methods; avoid Node‑specific APIs in server code paths.</li></ul><hr><h2 id="configuration-management" tabindex="-1">Configuration Management <a class="header-anchor" href="#configuration-management" aria-label="Permalink to &quot;Configuration Management&quot;">​</a></h2><p>Source: <code>src/config/config-loader.ts</code>, <code>src/types/config.ts</code></p><p>Best practices:</p><ul><li>Centralize configuration load and validation at startup using the <code>ConfigLoader</code>. Use file‑based YAML as primary source, environment overrides for deployment variance.</li><li>Validate required sections: <code>master_oauth</code>, <code>servers[]</code>, and <code>hosting</code>. The current loader already enforces a minimal schema.</li><li>Distribute configuration: <ul><li><code>MultiAuthManager</code>: initialize with <code>master_oauth</code>; register <code>servers[].auth_strategy</code> and <code>servers[].auth_config</code>.</li><li><code>ModuleLoader</code>: uses server <code>config</code> and <code>hosting</code> to derive endpoints.</li><li><code>CapabilityAggregator</code>: use default endpoints (<code>/capabilities</code>, <code>/mcp/tools/list</code>, <code>/mcp/resources/list</code>) unless overridden.</li><li><code>RequestRouter</code>: honor routing policy (<code>routing.loadBalancer</code>, <code>routing.circuitBreaker</code>, <code>routing.retry</code>).</li></ul></li><li>Secrets management: <ul><li>Never bake secrets into the repo. Supply <code>TOKEN_ENC_KEY</code>, OAuth client secrets, and provider credentials via environment variables or secret stores.</li></ul></li><li>Hot reload (optional): <ul><li>If runtime config reload is required, treat it as a phased update: pause new requests (or drain), reload servers, refresh discovery, swap router reference, resume.</li></ul></li></ul><hr><h2 id="lifecycle-graceful-shutdown" tabindex="-1">Lifecycle &amp; Graceful Shutdown <a class="header-anchor" href="#lifecycle-graceful-shutdown" aria-label="Permalink to &quot;Lifecycle &amp; Graceful Shutdown&quot;">​</a></h2><p>Startup sequence (recommended):</p><ol><li>Load config (file/env) and validate.</li><li>Initialize <code>MultiAuthManager</code> and register server auth strategies.</li><li>Load servers via <code>ModuleLoader</code> and run initial health checks.</li><li>Discover capabilities via <code>CapabilityAggregator</code> and index mappings.</li><li>Build <code>RequestRouter</code> with routing config; inject the <code>getAuthHeaders</code> provider from <code>MultiAuthManager</code>.</li><li>Instantiate <code>ProtocolHandler</code> and register transport routes (HTTP/JSON‑RPC).</li><li>Expose <code>/health</code> and <code>/capabilities</code> endpoints; begin background health checks at a fixed interval.</li></ol><p>Shutdown sequence:</p><ol><li>Stop accepting new requests (server‑level flag or server.close()).</li><li>Allow in‑flight requests to finish with a deadline; cancel remaining if needed.</li><li>Stop background health checks; flush logs/metrics.</li><li><code>ModuleLoader.unloadAll()</code> to stop managed processes; release resources.</li></ol><p>Health monitoring:</p><ul><li>Use <code>ModuleLoader.performHealthCheck()</code> to feed <code>RouteRegistry</code> health scores (indirectly via success/failure marking in the router). Consider a periodic sweeper to probe idle instances.</li></ul><hr><h2 id="error-handling-strategy" tabindex="-1">Error Handling Strategy <a class="header-anchor" href="#error-handling-strategy" aria-label="Permalink to &quot;Error Handling Strategy&quot;">​</a></h2><p>Principles:</p><ul><li>Fail fast on invalid input with clear messages.</li><li>Propagate auth/authorization failures distinctly from network errors.</li><li>Normalize upstream failures (HTTP status, timeouts) into consistent error payloads and JSON‑RPC errors.</li><li>Make circuit‑breaker state visible in errors where relevant (e.g., “circuit open, retryAfterMs”).</li></ul><p>Recommended mappings:</p><ul><li>Validation errors → 400 / JSON‑RPC <code>-32602</code>.</li><li>Not found (unknown server/tool/resource) → 404 / <code>-32601</code> (or domain‑specific code).</li><li>Upstream/network/transient → 502/504 or <code>-32000</code> range with <code>data</code> including <code>lastStatus</code> and retry metadata.</li><li>OAuth delegation required → return structured object indicating delegation with provider endpoints and scopes.</li></ul><p>Logging:</p><ul><li>Use <code>Logger</code> consistently at INFO for high‑level events, WARN for recoverable issues, ERROR for failures, and DEBUG guarded by <code>DEBUG=1</code> for verbose traces. Avoid logging secrets.</li></ul><hr><h2 id="performance-considerations" tabindex="-1">Performance Considerations <a class="header-anchor" href="#performance-considerations" aria-label="Permalink to &quot;Performance Considerations&quot;">​</a></h2><p>Hot paths:</p><ul><li><code>RouteRegistry.resolve()</code>: cache recent resolutions (<code>cacheTtlMs</code>) to reduce selection overhead.</li><li><code>CapabilityAggregator</code>: keep mappings in memory; avoid re‑computing per request.</li><li>Retry backoff (<code>RetryHandler</code>) with jitter reduces thundering herds.</li><li>Circuit breaker short‑circuits calls to unhealthy instances.</li></ul><p>Optimizations:</p><ul><li>Prefer JSON payloads and keep responses compact.</li><li>Reduce capability discovery frequency; refresh on demand or at a reasonable interval.</li><li>Consider compressing large resource reads if transport supports it.</li><li>For high cardinality servers, shard health checks and discovery to avoid spikes.</li></ul><p>Resource usage:</p><ul><li>Token storage: <code>TokenManager</code> encrypts and stores tokens; in production set <code>TOKEN_ENC_KEY</code>. Schedule <code>cleanupExpiredTokens()</code> to bound memory.</li></ul><hr><h2 id="monitoring-observability" tabindex="-1">Monitoring &amp; Observability <a class="header-anchor" href="#monitoring-observability" aria-label="Permalink to &quot;Monitoring &amp; Observability&quot;">​</a></h2><p>Recommended signals:</p><ul><li>Request metrics per method: count, latency (p50/p95/p99), error rate.</li><li>Routing metrics: retries, open circuits, half‑open transitions, selected LB strategy.</li><li>Health metrics: per‑server instance health score, last health check timestamp, status.</li><li>Auth metrics: delegation responses issued, proxy refreshes, validation failures (without PII).</li></ul><p>Implementation hints:</p><ul><li>Wrap router calls to capture latency and outcome metrics.</li><li>Surface <code>/health</code> (overall) and <code>/capabilities</code> for readiness probes.</li><li>Include correlation IDs (request ID) in logs and forward them to backends when possible.</li></ul><hr><h2 id="cross‐platform-compatibility-node-workers" tabindex="-1">Cross‑Platform Compatibility (Node &amp; Workers) <a class="header-anchor" href="#cross‐platform-compatibility-node-workers" aria-label="Permalink to &quot;Cross‑Platform Compatibility (Node &amp; Workers)&quot;">​</a></h2><p>Current constraints:</p><ul><li>Routing, aggregator, and auth manager avoid Node‑specific APIs and rely on <code>fetch</code>, making them compatible with Workers.</li><li><code>ConfigLoader</code> uses <code>node:fs/promises</code> (Node‑only). For Workers builds, either: <ul><li>Use environment‑based config (<code>loadFromEnv</code>) exclusively, or</li><li>Provide a conditional import/export so the Node loader is tree‑shaken from Worker bundles.</li></ul></li></ul><p>Deployment notes:</p><ul><li>Node/Koyeb/Docker: run an HTTP server (Express/Fastify/undici) exposing MCP endpoints; retain the same handler logic.</li><li>Workers: implement a <code>fetch()</code> entry that routes paths to <code>ProtocolHandler</code> methods; avoid dynamic <code>require</code> and other Node‑only code.</li><li>Ensure all timeouts and retry budgets fit the platform limits (e.g., Workers CPU time constraints).</li></ul><hr><h2 id="testing-strategy" tabindex="-1">Testing Strategy <a class="header-anchor" href="#testing-strategy" aria-label="Permalink to &quot;Testing Strategy&quot;">​</a></h2><p>Unit tests:</p><ul><li><code>CapabilityAggregator</code> mappings and prefixing; discovery fallbacks when <code>/capabilities</code> fails.</li><li><code>RequestRouter</code> logic: mapping, retry/backoff behavior, circuit breaker transitions, load balancing choices.</li><li><code>MultiAuthManager</code>: token validation paths, delegation object shape, proxy refresh fallback logic.</li><li><code>TokenManager</code>: encryption/decryption, expiration cleanup, state generation/validation.</li></ul><p>Integration tests:</p><ul><li>ProtocolHandler + Router + Aggregator using mocked <code>fetch</code> for backends.</li><li>Auth integration paths: master pass‑through, delegation required (expect structured response), proxy refresh.</li><li>Error paths: circuit open, upstream 5xx with retries, timeouts.</li></ul><p>End‑to‑end (optional):</p><ul><li>Spin up a sample backend (or mock server) and drive calls through HTTP endpoints <code>/mcp/tools/call</code>, <code>/mcp/resources/read</code> with and without auth.</li></ul><p>Cross‑platform tests:</p><ul><li>Run the same test suite under Node and a Workers‑like runtime (e.g., Miniflare) to ensure fetch‑based code paths behave consistently.</li></ul><hr><h2 id="suggested-implementation-outline" tabindex="-1">Suggested Implementation Outline <a class="header-anchor" href="#suggested-implementation-outline" aria-label="Permalink to &quot;Suggested Implementation Outline&quot;">​</a></h2><p>ProtocolHandler (concrete wiring):</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// src/server/protocol-handler.ts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ProtocolHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> readonly</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> aggregator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CapabilityAggregator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> readonly</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> router</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RequestRouter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> readonly</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getAuthToken</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> unknown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> undefined</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ) {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  private</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> extractToken</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Prefer an injected extractor from the hosting layer; fallback to req.headers?.authorization</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAuthToken</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?.(req) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">??</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> normalizeBearer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req?.headers?.authorization) } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handleListTools</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">_req</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ListToolsRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ListToolsResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { tools: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.aggregator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAllTools</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.router </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).servers) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handleCallTool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CallToolRequest</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">meta</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CallToolResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> token</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">extractToken</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routeCallTool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req, token)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handleListResources</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">_req</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ListResourcesRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ListResourcesResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { resources: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.aggregator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAllResources</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.router </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).servers) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handleReadResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ReadResourceRequest</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">meta</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ReadResourceResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> token</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">extractToken</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routeReadResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req, token)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handleSubscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">_req</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SubscribeRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SubscribeResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routeSubscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_req)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>MasterServer (initialization and DI):</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// src/server/master-server.ts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MasterServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* ... */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // create loader, aggregator</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // create router with getAuthHeaders provider (wired to MultiAuthManager)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // construct ProtocolHandler with dependencies</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> startFromConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MasterConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">clientToken</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 1) load servers -&gt; 2) discover capabilities -&gt; 3) wire handler</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Hosting adapter (Node/Workers):</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Pseudocode for HTTP wiring</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/mcp/tools/list&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> handler.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">handleListTools</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req.body).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res.json))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/mcp/tools/call&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> handler.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">handleCallTool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">req.body, meta: { headers: req.headers } }).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res.json))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/mcp/resources/list&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> handler.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">handleListResources</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req.body).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res.json))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/mcp/resources/read&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> handler.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">handleReadResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">req.body, meta: { headers: req.headers } }).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res.json))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/capabilities&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">_req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(aggregator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">aggregate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">servers])))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/health&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">_req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ ok: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, servers: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ms.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">performHealthChecks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }))</span></span></code></pre></div><p>Notes:</p><ul><li>Keep ProtocolHandler thin; routing and auth composition stay in <code>RequestRouter</code> and <code>MultiAuthManager</code>.</li><li>Avoid Node‑only APIs in the handler/routing paths to preserve Workers compatibility.</li></ul><hr><h2 id="conclusion" tabindex="-1">Conclusion <a class="header-anchor" href="#conclusion" aria-label="Permalink to &quot;Conclusion&quot;">​</a></h2><p>Phase 5 finalizes the core server by implementing a complete protocol handler and orchestrating all components into a coherent whole. With clear initialization, strong error/observability practices, and cross‑platform design, the Master MCP Server becomes a production‑ready aggregation layer exposing a single, consistent MCP interface across heterogeneous backends.</p>`,104)]))}const g=s(l,[["render",n]]);export{c as __pageData,g as default};

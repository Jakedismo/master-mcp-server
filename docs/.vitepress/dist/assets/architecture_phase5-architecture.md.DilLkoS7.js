import{_ as i,c as a,o as e,a6 as n}from"./chunks/framework.CHl2ywxc.js";const c=JSON.parse('{"title":"Phase 5: Core Master Server Architecture","description":"","frontmatter":{},"headers":[],"relativePath":"architecture/phase5-architecture.md","filePath":"architecture/phase5-architecture.md","lastUpdated":1755281500000}'),t={name:"architecture/phase5-architecture.md"};function l(r,s,h,p,o,k){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="phase-5-core-master-server-architecture" tabindex="-1">Phase 5: Core Master Server Architecture <a class="header-anchor" href="#phase-5-core-master-server-architecture" aria-label="Permalink to &quot;Phase 5: Core Master Server Architecture&quot;">​</a></h1><p>This document defines the production-grade architecture for the Master MCP Server, integrating Phases 1–4 into a cohesive, reliable, and cross‑platform system that fully implements the Model Context Protocol (MCP) with high performance and strong operational characteristics.</p><h2 id="goals-and-non-functional-requirements" tabindex="-1">Goals and Non-Functional Requirements <a class="header-anchor" href="#goals-and-non-functional-requirements" aria-label="Permalink to &quot;Goals and Non-Functional Requirements&quot;">​</a></h2><ul><li>Reliability: graceful degradation, fault isolation, circuit breakers, retries.</li><li>Performance: low-latency routing, streaming, backpressure, batching where helpful.</li><li>Cross-platform: single codebase targeting Node.js and Cloudflare Workers.</li><li>Observability: structured logs, metrics, health probes, trace context propagation.</li><li>Security: unified authentication/authorization, least privilege, secret hygiene.</li><li>Operability: clear lifecycle, config hot-reload (Node), safe rollouts, predictable shutdown.</li></ul><hr><h2 id="high-level-architecture" tabindex="-1">High-Level Architecture <a class="header-anchor" href="#high-level-architecture" aria-label="Permalink to &quot;High-Level Architecture&quot;">​</a></h2><p>Core integration components introduced or finalized in Phase 5:</p><ul><li>Enhanced ProtocolHandler: complete MCP semantics (handshake, capabilities, requests, streaming, events, cancellation, errors).</li><li>Master Server Orchestrator: central lifecycle and coordination (start, run, stop, drain).</li><li>Configuration Manager: layered config loading, schema validation, subscription, and safe reload.</li><li>Dependency Container: DI with lifetimes (singleton, scoped, transient) and per-connection scope.</li><li>Health Monitor: status aggregation, readiness/liveness probes, component scorecards.</li><li>Error Handler: typed errors, global boundaries, recovery, and escalation policies.</li></ul><p>Previously delivered components integrated here:</p><ul><li>MultiAuthManager + OAuth providers (Phase 2).</li><li>ModuleLoader, CapabilityAggregator, RequestRouter (Phase 3).</li><li>Routing resilience: circuit breakers, retry, load balancing (Phase 4).</li></ul><h3 id="component-view" tabindex="-1">Component View <a class="header-anchor" href="#component-view" aria-label="Permalink to &quot;Component View&quot;">​</a></h3><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">flowchart TD</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  subgraph Orchestrator[Master Server Orchestrator]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    DIR[Dependency Container]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    CFG[Configuration Manager]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ERR[Error Handler]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    HLTH[Health Monitor]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    LOG[Structured Logger]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  subgraph Protocol[Enhanced ProtocolHandler]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    TRANS[Transport Adapters\\n(HTTP/WebSocket/Stdio)]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    SESS[Session Manager]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    CANC[Cancellation &amp; Backpressure]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  subgraph Routing[Request Routing Plane]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    AUTH[MultiAuthManager]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    CAP[CapabilityAggregator]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RTR[RequestRouter\\n+ CircuitBreakers/Retry/LB]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  subgraph Modules[Module Layer]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    MODS[(Loaded Modules)]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Orchestrator --&gt;|wires| Protocol</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Orchestrator --&gt;|wires| Routing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Orchestrator --&gt;|wires| Modules</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Protocol --&gt; AUTH</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Protocol --&gt; RTR</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  RTR --&gt; CAP</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  CAP --&gt; MODS</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  CFG --&gt; Orchestrator</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  CFG --&gt; Protocol</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  CFG --&gt; Routing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  CFG --&gt; Modules</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ERR --&gt; Orchestrator</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ERR --&gt; Protocol</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ERR --&gt; Routing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ERR --&gt; Modules</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  HLTH --&gt; Orchestrator</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  HLTH --&gt; Protocol</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  HLTH --&gt; Routing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  HLTH --&gt; Modules</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  LOG --&gt; Orchestrator</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  LOG --&gt; Protocol</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  LOG --&gt; Routing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  LOG --&gt; Modules</span></span></code></pre></div><hr><h2 id="key-architectural-decisions" tabindex="-1">Key Architectural Decisions <a class="header-anchor" href="#key-architectural-decisions" aria-label="Permalink to &quot;Key Architectural Decisions&quot;">​</a></h2><ul><li>Main Server Structure: a single <code>MasterServer</code> orchestrator composes a DI container and wires all subsystems; per-connection scopes are created for protocol sessions.</li><li>Communication Style: direct method calls within a process; event bus for health/events. No cross-process RPC assumed in baseline; can later extend via adapters.</li><li>Dependency Injection: DI container with typed tokens; limited service locator only within the orchestrator/bootstrap to resolve dynamic plugins.</li><li>Configuration Strategy: layered cascade (defaults → file(s) → env → secrets → CLI → runtime overrides) with schema validation and subscription for safe reload.</li><li>Error Handling: hierarchical boundaries (transport → protocol → routing → module); typed errors with recovery policies and circuit breakers.</li><li>Health Model: readiness gated on minimal critical set; liveness permissive; component-level health scores aggregated for roll-up status.</li><li>Cross-Platform: hexagonal architecture with platform adapters for transport, storage, timers, crypto, and process signals.</li></ul><hr><h2 id="initialization-and-lifecycle" tabindex="-1">Initialization and Lifecycle <a class="header-anchor" href="#initialization-and-lifecycle" aria-label="Permalink to &quot;Initialization and Lifecycle&quot;">​</a></h2><h3 id="phased-startup-sequence" tabindex="-1">Phased Startup Sequence <a class="header-anchor" href="#phased-startup-sequence" aria-label="Permalink to &quot;Phased Startup Sequence&quot;">​</a></h3><ol><li>Load Config: read layered config, validate schema, materialize effective config.</li><li>Init Logger: configure structured logger (sinks, levels, redaction) early.</li><li>Init Error Handler: install global handlers (unhandledRejection, uncaughtException or equivalent), attach context enrichers.</li><li>Build DI Container: register tokens, factories, lifetimes; inject config/logger/error handler.</li><li>Init Health Monitor: register component health probes, start periodic sampling.</li><li>Init Auth Providers: instantiate <code>MultiAuthManager</code> with configured providers, test credentials (non-destructive capability check).</li><li>Load Modules: <code>ModuleLoader</code> discovers/loads modules; <code>CapabilityAggregator</code> indexes capabilities.</li><li>Build Routing Plane: instantiate <code>RequestRouter</code> with policy bundle (circuit breakers, retry, load balancing strategy, budgets).</li><li>Init ProtocolHandler: bind transports; configure session manager, streaming, cancellation, backpressure.</li><li>Expose Probes: bind readiness/liveness endpoints and metrics (if platform permits).</li><li>Accept Traffic: mark readiness when critical set is healthy (Auth, Modules minimal set, Router, Protocol), begin serving.</li></ol><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sequenceDiagram</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  participant Boot as Orchestrator</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  participant Cfg as Config Manager</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  participant DI as DI Container</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  participant Err as Error Handler</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  participant Log as Logger</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  participant Hlth as Health Monitor</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  participant Auth as MultiAuthManager</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  participant Mdl as ModuleLoader</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  participant Cap as CapabilityAggregator</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  participant Rtr as RequestRouter</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  participant Ph as ProtocolHandler</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  participant Tr as Transports</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Boot-&gt;&gt;Cfg: load() + validate()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Boot-&gt;&gt;Log: configure(levels, sinks)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Boot-&gt;&gt;Err: install(global handlers)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Boot-&gt;&gt;DI: register(tokens, factories)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Boot-&gt;&gt;Hlth: register(probes)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Boot-&gt;&gt;Auth: init(providers)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Boot-&gt;&gt;Mdl: load()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Mdl--&gt;&gt;Cap: capabilities(index)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Boot-&gt;&gt;Rtr: init(policies: CB, retry, LB)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Boot-&gt;&gt;Ph: init(session, streams)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Ph-&gt;&gt;Tr: bind(listeners)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Boot-&gt;&gt;Hlth: setReadiness(if critical healthy)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Boot--&gt;&gt;All: start serving</span></span></code></pre></div><h3 id="runtime-and-shutdown" tabindex="-1">Runtime and Shutdown <a class="header-anchor" href="#runtime-and-shutdown" aria-label="Permalink to &quot;Runtime and Shutdown&quot;">​</a></h3><ul><li>Runtime: Orchestrator supervises components; health changes emit events; config updates trigger safe reload paths.</li><li>Graceful Shutdown: stop accepting new connections, drain in-flight with deadline, unload modules, release resources (timers, caches, connections) via DI disposers.</li></ul><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">flowchart LR</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Stop[Shutdown Signal] --&gt; Drain[Stop Accepting Traffic]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Drain --&gt; Deadline[Drain with Deadline]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Deadline --&gt; Dispose[Dispose Scoped Resources]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Dispose --&gt; Flush[Flush Logs/Metrics]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Flush --&gt; Exit[Process Exit / Runtime close]</span></span></code></pre></div><hr><h2 id="configuration-management" tabindex="-1">Configuration Management <a class="header-anchor" href="#configuration-management" aria-label="Permalink to &quot;Configuration Management&quot;">​</a></h2><h3 id="cascade-and-overrides" tabindex="-1">Cascade and Overrides <a class="header-anchor" href="#cascade-and-overrides" aria-label="Permalink to &quot;Cascade and Overrides&quot;">​</a></h3><ul><li>Sources (precedence low→high): defaults → config file(s) → environment → secrets store → CLI flags → runtime overrides (admin API / KV).</li><li>Validation: TypeScript-first schema (e.g., Zod or TypeBox) to produce typed <code>EffectiveConfig</code>.</li><li>Distribution: DI injects <code>ConfigAccessor</code> into components; subscriptions for on-change with guarded apply.</li><li>Hot Reload (Node): file watcher with debounce; validate then atomically swap; rollback on failure.</li><li>Controlled Reload (Workers): pull from KV/Durable Object on interval/trigger; ETag to avoid redundant work.</li></ul><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">flowchart TB</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Def[Defaults] --&gt; Merge</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  File[Config File(s)] --&gt; Merge</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Env[Environment Vars] --&gt; Merge</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Sec[Secrets Provider] --&gt; Merge</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  CLI[CLI Flags] --&gt; Merge</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  RT[Runtime Overrides] --&gt; Merge</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Merge --&gt;|validate| Eff[EffectiveConfig]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Eff --&gt; DI</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Eff --&gt; Sub[Subscribers]</span></span></code></pre></div><h3 id="config-scoping" tabindex="-1">Config Scoping <a class="header-anchor" href="#config-scoping" aria-label="Permalink to &quot;Config Scoping&quot;">​</a></h3><ul><li>Global: server-level parameters (ports, timeouts, logging, metrics, transports).</li><li>Auth: providers, token lifetimes, audience, JWKS, scopes.</li><li>Routing: retry policies, breaker thresholds, budgets, load balancing strategy.</li><li>Modules: per-module config blocks with namespaced keys.</li><li>Platform: adapter knobs (Workers vs Node-specific limits).</li></ul><h3 id="example-illustrative" tabindex="-1">Example (illustrative) <a class="header-anchor" href="#example-illustrative" aria-label="Permalink to &quot;Example (illustrative)&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EffectiveConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">maxConcurrent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">idleTimeoutMs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; },</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  logging</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">level</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;debug&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;info&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;warn&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;error&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">redaction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] },</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  transports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">http</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">port</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ws</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">port</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">stdio</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">enabled</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } },</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  auth</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">providers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ProviderConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]; </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">audience</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  routing</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">retry</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RetryPolicy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">breaker</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BreakerPolicy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">lb</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;round_robin&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;least_latency&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hashed&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  modules</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Record</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">unknown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  platform</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">runtime</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;workers&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">limits</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">memoryMb</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h2 id="dependency-container" tabindex="-1">Dependency Container <a class="header-anchor" href="#dependency-container" aria-label="Permalink to &quot;Dependency Container&quot;">​</a></h2><ul><li>Tokens: string/symbol keys for services (<code>TOKENS.Logger</code>, <code>TOKENS.Config</code>, etc.).</li><li>Lifetimes: singleton (process), scoped (per connection/request), transient (per resolve).</li><li>Scopes: <code>RootScope</code> built at startup; <code>ConnectionScope</code> created by ProtocolHandler for each session; <code>RequestScope</code> optional for per-request overrides.</li><li>Disposal: async disposers executed on scope teardown (close connections, timers, streams).</li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Conceptual DI usage</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">container.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TOKENS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.Config, { useValue: effectiveConfig });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">container.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TOKENS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.Logger, { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">useFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createLogger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(effectiveConfig) });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">container.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TOKENS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.Router, { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">useFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RequestRouter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TOKENS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.Policies)) });</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Per-connection scope</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> scope</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> container.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createScope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;connection&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">scope.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TOKENS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.SessionContext, { useValue: sessionCtx });</span></span></code></pre></div><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">flowchart LR</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Root[RootScope] --&gt; Conn1[ConnectionScope A]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Root --&gt; Conn2[ConnectionScope B]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Conn1 --&gt; Req1[RequestScope 1]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Conn1 --&gt; Req2[RequestScope 2]</span></span></code></pre></div><hr><h2 id="enhanced-protocolhandler-mcp" tabindex="-1">Enhanced ProtocolHandler (MCP) <a class="header-anchor" href="#enhanced-protocolhandler-mcp" aria-label="Permalink to &quot;Enhanced ProtocolHandler (MCP)&quot;">​</a></h2><p>Responsibilities:</p><ul><li>Implements full MCP handshake and capability advertisement using <code>CapabilityAggregator</code>.</li><li>Manages sessions: authentication, context, and resource cleanup per connection.</li><li>Streams: supports chunked responses, tool outputs, and progress events.</li><li>Cancellation: <code>AbortController</code> per request with propagation to modules.</li><li>Backpressure: limits concurrent in-flight per session and globally; applies queuing policies.</li><li>Errors: maps internal typed errors to MCP-compliant error responses with redaction of sensitive details.</li></ul><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sequenceDiagram</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  participant C as Client</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  participant T as Transport</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  participant P as ProtocolHandler</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  participant A as Auth</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  participant R as RequestRouter</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  participant M as Module</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  C-&gt;&gt;T: connect()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  T-&gt;&gt;P: onConnection</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  P-&gt;&gt;A: authenticate()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  A--&gt;&gt;P: Principal</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  P-&gt;&gt;C: advertise(capabilities)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  C-&gt;&gt;P: request(toolCall)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  P-&gt;&gt;R: route(request)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  R-&gt;&gt;M: invoke()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  M--&gt;&gt;R: stream(chunks)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  R--&gt;&gt;P: response(stream)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  P--&gt;&gt;C: stream + completion</span></span></code></pre></div><hr><h2 id="routing-plane-integration" tabindex="-1">Routing Plane Integration <a class="header-anchor" href="#routing-plane-integration" aria-label="Permalink to &quot;Routing Plane Integration&quot;">​</a></h2><ul><li>CapabilityAggregator: collects and normalizes capability metadata (names, schemas, costs, latencies) used for routing decisions and capability advertisement.</li><li>RequestRouter: chooses target module(s) with policies: <ul><li>Circuit breakers per module and per-capability (Phase 4).</li><li>Retries with jitter and idempotency guard.</li><li>Load balancing strategies selectable by config (RR/latency/hashed).</li></ul></li><li>Observability: propagates tracing, emits structured events on route selection, retry, and fallback.</li></ul><hr><h2 id="error-handling-and-recovery" tabindex="-1">Error Handling and Recovery <a class="header-anchor" href="#error-handling-and-recovery" aria-label="Permalink to &quot;Error Handling and Recovery&quot;">​</a></h2><h3 id="error-taxonomy" tabindex="-1">Error Taxonomy <a class="header-anchor" href="#error-taxonomy" aria-label="Permalink to &quot;Error Taxonomy&quot;">​</a></h3><ul><li>Auth errors: unauthenticated/unauthorized.</li><li>Protocol errors: invalid message, timeout, cancel, stream mismatch.</li><li>Routing errors: no route, overloaded, exhausted budgets.</li><li>Module errors: tool failures, validation errors, transient infra errors.</li><li>System errors: resource exhaustion, internal bug.</li></ul><h3 id="propagation-and-boundaries" tabindex="-1">Propagation and Boundaries <a class="header-anchor" href="#propagation-and-boundaries" aria-label="Permalink to &quot;Propagation and Boundaries&quot;">​</a></h3><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">flowchart TB</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ModErr[Module Error] --&gt; CB[Circuit Breaker]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  CB --&gt;|open| Fallback[Fallback/Degrade]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  CB --&gt;|half-open| Retry[Retry]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Retry --&gt; Router</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Router --&gt; Protocol</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Protocol --&gt; Orchestrator</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Orchestrator --&gt; Logger</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Orchestrator --&gt; Health[Health Score Impact]</span></span></code></pre></div><h3 id="recovery-strategies" tabindex="-1">Recovery Strategies <a class="header-anchor" href="#recovery-strategies" aria-label="Permalink to &quot;Recovery Strategies&quot;">​</a></h3><ul><li>Resiliency: circuit breakers, exponential backoff with jitter, hedged requests for read-only ops (optional), deadline propagation.</li><li>Degradation: fallback modules/capabilities; reduce concurrency; temporarily hide a capability from advertisement when health is poor.</li><li>Containment: per-session and per-module quotas; memory and time budgets.</li><li>Escalation: error budgets breach triggers health status downgrade and alert event.</li></ul><h3 id="global-error-handling" tabindex="-1">Global Error Handling <a class="header-anchor" href="#global-error-handling" aria-label="Permalink to &quot;Global Error Handling&quot;">​</a></h3><ul><li>Install top-level handlers; tag errors with request/session ids; redact secrets.</li><li>Provide configurable policy: crash-on-unknown vs isolate-and-continue.</li></ul><hr><h2 id="health-monitoring-and-status" tabindex="-1">Health Monitoring and Status <a class="header-anchor" href="#health-monitoring-and-status" aria-label="Permalink to &quot;Health Monitoring and Status&quot;">​</a></h2><ul><li>Probes: each component exposes <code>getStatus(): { level: ok|warn|error, details, since }</code>.</li><li>Aggregation: Health Monitor rolls up to liveness/readiness: <ul><li>Liveness: process is running; always <code>ok</code> unless unrecoverable runtime.</li><li>Readiness: critical dependencies healthy; traffic accepted only when <code>ok</code>.</li></ul></li><li>Endpoints: <code>/health/live</code>, <code>/health/ready</code> (Node HTTP/WS server); Workers implement via <code>fetch</code> route.</li><li>Metrics: counters, gauges, histograms (requests, latencies, errors, CB state, queue depth).</li></ul><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">flowchart LR</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Comp1[Auth] --&gt; Agg[Health Aggregator]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Comp2[Router] --&gt; Agg</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Comp3[Modules] --&gt; Agg</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Comp4[Protocol] --&gt; Agg</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Agg --&gt; Ready[Readiness]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Agg --&gt; Live[Liveness]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Agg --&gt; Metrics</span></span></code></pre></div><hr><h2 id="resource-management" tabindex="-1">Resource Management <a class="header-anchor" href="#resource-management" aria-label="Permalink to &quot;Resource Management&quot;">​</a></h2><ul><li>Memory: bounded caches; object pools; streaming to avoid buffering; truncate logs.</li><li>Concurrency: global and per-session max in-flight; fair queueing; backpressure signals to clients.</li><li>Connections: idle timeouts; keep-alive tuning; graceful draining.</li><li>Cleanup: DI disposers ensure transports, timers, and streams are closed on scope teardown.</li></ul><hr><h2 id="performance-and-scalability" tabindex="-1">Performance and Scalability <a class="header-anchor" href="#performance-and-scalability" aria-label="Permalink to &quot;Performance and Scalability&quot;">​</a></h2><ul><li>Fast path: avoid deep object cloning; zero-copy streaming; minimize JSON transforms.</li><li>Adaptive concurrency: adjust per-module limits based on observed latency/error rate.</li><li>Load balancing: choose strategy by workload; record EWMA latencies for least-latency mode.</li><li>Batching: optional batching of compatible small requests (configurable) at router ingress.</li><li>Pre-warming: module cold-start mitigation; background prime caches after startup.</li><li>Parallelism: <ul><li>Node: optional worker threads/process clustering guarded by shared-nothing design.</li><li>Workers: shard by tenant/key using Durable Objects or consistent hashing to DO ids.</li></ul></li><li>Observability: percentile latencies (p50/p95/p99), error rates, breaker state, queue depth, GC pauses.</li><li>SLOs (illustrative): <ul><li>Ready under 3s cold start (Node), 500ms warm start (Workers).</li><li>p95 routing overhead &lt; 5ms (excludes module execution).</li><li>Error budget 0.1% for routing plane.</li></ul></li></ul><hr><h2 id="cross-platform-compatibility" tabindex="-1">Cross-Platform Compatibility <a class="header-anchor" href="#cross-platform-compatibility" aria-label="Permalink to &quot;Cross-Platform Compatibility&quot;">​</a></h2><h3 id="hexagonal-boundaries" tabindex="-1">Hexagonal Boundaries <a class="header-anchor" href="#hexagonal-boundaries" aria-label="Permalink to &quot;Hexagonal Boundaries&quot;">​</a></h3><ul><li>TransportAdapter: <code>stdio</code> (Node), <code>ws/http</code> (Node/Workers), optional <code>unix/tcp</code> (Node-only).</li><li>StorageAdapter: filesystem (Node) vs KV/DO (Workers).</li><li>TimerAdapter: <code>setTimeout</code> (Node) vs Alarms/Scheduled (Workers-safe patterns).</li><li>CryptoAdapter: Node <code>crypto</code> vs WebCrypto API.</li><li>ProcessSignals: Node signals vs Workers’ abort signals and controller semantics.</li></ul><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">flowchart TB</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Core[Core Domain: Protocol, Routing, Auth, Config APIs] --&gt;|ports| Ports[Ports/Interfaces]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Ports --&gt;|adapters| Node[Node Adapters]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Ports --&gt;|adapters| Wrk[Workers Adapters]</span></span></code></pre></div><h3 id="platform-notes" tabindex="-1">Platform Notes <a class="header-anchor" href="#platform-notes" aria-label="Permalink to &quot;Platform Notes&quot;">​</a></h3><ul><li>Node.js <ul><li>Can expose HTTP/WS servers and stdio; supports file watchers; native TCP.</li><li>Graceful shutdown via SIGINT/SIGTERM; use <code>server.close()</code> + connection tracking.</li><li>Prefer <code>pino</code> for JSON logs, <code>undici</code> for HTTP.</li></ul></li><li>Cloudflare Workers <ul><li>No TCP/stdio; use <code>fetch</code> and <code>WebSocketPair</code>; state via KV/Durable Objects.</li><li>No long synchronous startup; keep init lightweight; rely on module global for warm state.</li><li>No process signals; use abort signals/timeouts; draining via per-request lifetime.</li></ul></li></ul><hr><h2 id="logging-and-observability" tabindex="-1">Logging and Observability <a class="header-anchor" href="#logging-and-observability" aria-label="Permalink to &quot;Logging and Observability&quot;">​</a></h2><ul><li>Structured logs with correlation ids (<code>traceId</code>, <code>sessionId</code>, <code>requestId</code>).</li><li>Sampling for high-volume info-level; errors always logged.</li><li>Redaction rules for secrets, tokens, and PII.</li><li>Metrics backend abstraction to export to Prometheus (Node) or Workers’ logs/metrics.</li><li>Optional OpenTelemetry trace context propagation if available.</li></ul><hr><h2 id="security-overview" tabindex="-1">Security Overview <a class="header-anchor" href="#security-overview" aria-label="Permalink to &quot;Security Overview&quot;">​</a></h2><ul><li>Authentication: MultiAuthManager (OAuth, tokens, keys). Cache validated principals.</li><li>Authorization: capability-level ACLs; deny-by-default; scoping via tenant/project.</li><li>Secrets: loaded from env/providers; never logged; rotate-friendly.</li><li>Auditing: append-only audit events for privileged actions and config changes.</li></ul><hr><h2 id="example-interfaces-illustrative" tabindex="-1">Example Interfaces (Illustrative) <a class="header-anchor" href="#example-interfaces-illustrative" aria-label="Permalink to &quot;Example Interfaces (Illustrative)&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MasterServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  stop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">opts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">deadlineMs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ProtocolHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  bind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">transports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TransportAdapter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[])</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  advertise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CapabilityAdvertisement</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RequestRouter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MCPRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SessionContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">signal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AbortSignal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MCPResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HealthMonitor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  getReadiness</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HealthStatus</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  getLiveness</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HealthStatus</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;statusChanged&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cb</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">rollup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HealthStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ConfigurationManager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  effective</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EffectiveConfig</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cb</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">cfg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EffectiveConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Unsubscribe</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h2 id="end-to-end-request-path" tabindex="-1">End-to-End Request Path <a class="header-anchor" href="#end-to-end-request-path" aria-label="Permalink to &quot;End-to-End Request Path&quot;">​</a></h2><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sequenceDiagram</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  participant Cl as Client</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  participant Tr as Transport</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  participant Ph as ProtocolHandler</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  participant Au as Auth</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  participant Rt as Router</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  participant Cb as CircuitBreaker</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  participant Md as Module</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Cl-&gt;&gt;Tr: send MCP request</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Tr-&gt;&gt;Ph: deliver</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Ph-&gt;&gt;Au: authenticate/authorize</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Au--&gt;&gt;Ph: principal</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Ph-&gt;&gt;Rt: route(request)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Rt-&gt;&gt;Cb: check state</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  alt Closed or Half-Open</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Cb-&gt;&gt;Md: invoke</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Md--&gt;&gt;Cb: success/stream</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Cb--&gt;&gt;Rt: pass-through</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  else Open</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Cb--&gt;&gt;Rt: short-circuit (fallback/retry)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  end</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Rt--&gt;&gt;Ph: response/stream</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Ph--&gt;&gt;Cl: response/stream</span></span></code></pre></div><hr><h2 id="operational-playbook" tabindex="-1">Operational Playbook <a class="header-anchor" href="#operational-playbook" aria-label="Permalink to &quot;Operational Playbook&quot;">​</a></h2><ul><li>Startup: monitor readiness; if not ready within timeout, fail fast and restart.</li><li>Rolling Upgrades: drain connections; maintain breaker state across instances if shared store is available.</li><li>Hot Reload (Node): config changes applied with validate-then-swap; modules may opt-in to hot-reload hooks.</li><li>Incident Response: check health metrics, breaker states, recent error taxonomy; apply degrade modes via runtime overrides if needed.</li></ul><hr><h2 id="risks-and-mitigations" tabindex="-1">Risks and Mitigations <a class="header-anchor" href="#risks-and-mitigations" aria-label="Permalink to &quot;Risks and Mitigations&quot;">​</a></h2><ul><li>Module misbehavior → contain via per-module breaker, quotas, and sandboxing options.</li><li>Config drift → schema validation + canary config and staged rollouts.</li><li>Backpressure collapse → enforce in-flight limits, fair queueing, and timeouts.</li><li>Platform mismatch → strict adapter boundaries; CI to run Node + Miniflare/Workers tests.</li></ul><hr><h2 id="summary" tabindex="-1">Summary <a class="header-anchor" href="#summary" aria-label="Permalink to &quot;Summary&quot;">​</a></h2><p>This Phase 5 architecture composes Phases 1–4 into a production-ready Master MCP Server with complete protocol handling, robust routing, strong observability, and a clear cross-platform story. The Orchestrator, backed by DI and a validated configuration layer, governs a resilient runtime with health-aware operation, controlled error propagation, and graceful lifecycle management.</p>`,93)]))}const E=i(t,[["render",l]]);export{c as __pageData,E as default};

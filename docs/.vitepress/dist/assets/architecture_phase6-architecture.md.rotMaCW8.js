import{_ as i,c as a,o as n,a6 as e}from"./chunks/framework.CHl2ywxc.js";const E=JSON.parse('{"title":"Phase 6: Configuration System Architecture","description":"","frontmatter":{},"headers":[],"relativePath":"architecture/phase6-architecture.md","filePath":"architecture/phase6-architecture.md","lastUpdated":1755281500000}'),t={name:"architecture/phase6-architecture.md"};function l(h,s,p,r,k,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="phase-6-configuration-system-architecture" tabindex="-1">Phase 6: Configuration System Architecture <a class="header-anchor" href="#phase-6-configuration-system-architecture" aria-label="Permalink to &quot;Phase 6: Configuration System Architecture&quot;">​</a></h1><p>This document defines a comprehensive, secure, and flexible configuration system for the Master MCP Server. It extends Phase 5’s Configuration Manager into a production‑grade subsystem with schema validation, multi‑environment layering, secure secret handling, hot‑reload, and cross‑platform adapters (Node.js and Cloudflare Workers).</p><h2 id="goals-and-scope" tabindex="-1">Goals and Scope <a class="header-anchor" href="#goals-and-scope" aria-label="Permalink to &quot;Goals and Scope&quot;">​</a></h2><ul><li>Typed configuration with canonical schema and strong validation.</li><li>Layered sources: defaults, files (JSON/YAML/TOML), env vars, remote stores, CLI, runtime overrides.</li><li>Environment-aware with inheritance and platform‑specific sections.</li><li>Secure handling of sensitive values: encryption at rest, key rotation, redaction, access control, audit trail.</li><li>Safe hot‑reload for non‑critical settings; consistent behavior across Node.js and Workers.</li><li>Cross‑platform abstractions for storage, crypto, time, and file watching.</li></ul><hr><h2 id="core-components" tabindex="-1">Core Components <a class="header-anchor" href="#core-components" aria-label="Permalink to &quot;Core Components&quot;">​</a></h2><ul><li>ConfigurationSchema: TypeScript-first, JSON Schema–backed definitions, including metadata (sensitivity, hot‑reloadability, ACL hints).</li><li>ValidationEngine: JSON Schema validator (Ajv) + custom invariants and cross‑field constraints.</li><li>EnvironmentManager: resolves effective environment (profile + platform) and layering order.</li><li>ConfigurationLoader: parses and merges from all sources; produces a typed <code>EffectiveConfig</code>.</li><li>SecretManager: pluggable secret resolution, encryption/decryption, rotation, redaction.</li><li>RuntimeUpdater: orchestrates safe hot‑reload, atomic apply, rollback, back‑pressure, and audit events.</li><li>AccessControl/Audit: read‑scoped config access, change authorization, append‑only audit log.</li><li>PlatformAdapters: filesystem/KV, crypto, watchers/timers to support Node.js and Workers.</li></ul><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">flowchart TD</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  subgraph Config[Configuration Subsystem]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    SCH[ConfigurationSchema]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    VAL[ValidationEngine]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ENV[EnvironmentManager]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    LDR[ConfigurationLoader]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    SEC[SecretManager]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RTU[RuntimeUpdater]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ACL[AccessControl &amp; Audit]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  LDR --&gt;|produces| EFF[EffectiveConfig]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  SCH --&gt; VAL</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ENV --&gt; LDR</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  SEC --&gt; LDR</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  VAL --&gt; LDR</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  LDR --&gt; RTU</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ACL --&gt; RTU</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  subgraph Core[Phase 5: Core]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    CFGM[ConfigManager]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    DI[DependencyContainer]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PROT[ProtocolHandler]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ROUT[RequestRouter]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    MODS[Modules]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  EFF --&gt; CFGM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  CFGM --&gt; DI</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  CFGM --&gt; PROT</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  CFGM --&gt; ROUT</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  CFGM --&gt; MODS</span></span></code></pre></div><hr><h2 id="key-architectural-decisions" tabindex="-1">Key Architectural Decisions <a class="header-anchor" href="#key-architectural-decisions" aria-label="Permalink to &quot;Key Architectural Decisions&quot;">​</a></h2><ol><li>Schema format and validation</li></ol><ul><li>Canonical format: JSON Schema draft 2020‑12. Portable across Node.js and Workers.</li><li>Authoring: TypeScript + TypeBox to define schemas with types; generate JSON Schema for Ajv.</li><li>Validation engine: Ajv (strict mode) with custom keywords for redaction, hot‑reload policy, and ACL hints.</li></ul><ol start="2"><li>Environment inheritance and override strategy</li></ol><ul><li>Profiles: <code>development</code>, <code>test</code>, <code>staging</code>, <code>production</code>, plus optional <code>local</code> overlay.</li><li>Layering: <code>defaults → profile → platform → file(s) → env → remote → CLI → runtime overrides</code>.</li><li>Deterministic deep‑merge with per‑field merge policy (object: deep; arrays: replace by default; opt‑in append/unique semantics via schema metadata).</li></ul><ol start="3"><li>Secret management and encryption</li></ol><ul><li>Sensitive values never stored or logged in plaintext; at rest encrypted using AES‑256‑GCM.</li><li>Key management via pluggable Keyring: KMS (AWS/GCP/Azure), Cloudflare Workers Secrets, or local dev key.</li><li>SecretRef indirection for remote secrets; uniform redaction and access control.</li></ul><ol start="4"><li>Hot‑reload mechanisms and safety</li></ol><ul><li>Node: file watcher + debounced apply; atomic swap with rollback, rate limiting, and safety checks.</li><li>Workers: periodic poll or event‑triggered fetch from remote store with ETag; only hot‑reloadable fields applied.</li></ul><ol start="5"><li>Source priority and merging</li></ol><ul><li>Priority (low→high): Defaults &lt; Files &lt; Env &lt; Remote &lt; CLI &lt; Runtime Overrides.</li><li>All merges validated against the canonical schema; invariants checked post‑merge.</li></ul><ol start="6"><li>Error handling and reporting</li></ol><ul><li>Startup fails fast on invalid effective config; emits structured error and suggested fixes.</li><li>Runtime updates use transactional apply; on error, rollback and emit audit + health warning.</li></ul><hr><h2 id="configuration-sources-and-flow" tabindex="-1">Configuration Sources and Flow <a class="header-anchor" href="#configuration-sources-and-flow" aria-label="Permalink to &quot;Configuration Sources and Flow&quot;">​</a></h2><p>Supported sources and unified merge flow:</p><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">flowchart TB</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Def[Defaults (in schema)] --&gt; M[Merge]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Prof[Profile file(s)] --&gt; M</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Plat[Platform section] --&gt; M</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Files[Config files JSON/YAML/TOML] --&gt; M</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Env[Environment variables] --&gt; M</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Remote[Remote config store] --&gt; M</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  CLI[Command-line flags] --&gt; M</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  RT[Runtime overrides] --&gt; M</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  M --&gt;|validate+invariants| Eff[EffectiveConfig]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Eff --&gt;|typed| Consumers[ConfigManager + Components]</span></span></code></pre></div><h3 id="file-formats" tabindex="-1">File Formats <a class="header-anchor" href="#file-formats" aria-label="Permalink to &quot;File Formats&quot;">​</a></h3><ul><li>JSON, YAML, TOML supported via adapters. Normalized into plain objects before merge.</li><li>Recommended layout (VCS): <ul><li><code>config/default.yaml</code> (checked in, minimal secrets; safe defaults)</li><li><code>config/development.yaml</code>, <code>config/test.yaml</code>, <code>config/staging.yaml</code>, <code>config/production.yaml</code></li><li><code>config/local.yaml</code> (gitignored)</li><li>Platform overlays: <code>config/platform.node.yaml</code>, <code>config/platform.workers.yaml</code></li></ul></li></ul><h3 id="environment-variables" tabindex="-1">Environment Variables <a class="header-anchor" href="#environment-variables" aria-label="Permalink to &quot;Environment Variables&quot;">​</a></h3><ul><li>Prefix: <code>MCP_</code> by default; mapping to nested paths via <code>__</code> separator, e.g. <code>MCP_LOGGING__LEVEL=info</code> → <code>logging.level</code>.</li><li>Type coercion: numbers, booleans, arrays (comma‑separated) with schema‑guided parsing.</li><li>Sensitive env vars auto‑redacted in diagnostics.</li></ul><h3 id="cli-flags" tabindex="-1">CLI Flags <a class="header-anchor" href="#cli-flags" aria-label="Permalink to &quot;CLI Flags&quot;">​</a></h3><ul><li>Mapped using dotted paths: <code>--logging.level=debug --server.maxConcurrent=128</code>.</li><li>Parse via a minimal, cross‑platform parser (e.g., yargs) abstracted behind an interface.</li></ul><h3 id="remote-configuration" tabindex="-1">Remote Configuration <a class="header-anchor" href="#remote-configuration" aria-label="Permalink to &quot;Remote Configuration&quot;">​</a></h3><ul><li>Interface <code>RemoteConfigStore</code> with implementations: <ul><li>Node: AWS SSM/Secrets Manager, GCP Secret Manager, Azure App Config, S3/GCS blobs.</li><li>Workers: Cloudflare KV/Durable Objects.</li></ul></li><li>Consistency: ETag/versioned reads; exponential backoff and jitter on failures.</li><li>Authentication handled by platform credentials; no secrets in the repo.</li></ul><h3 id="merge-semantics" tabindex="-1">Merge Semantics <a class="header-anchor" href="#merge-semantics" aria-label="Permalink to &quot;Merge Semantics&quot;">​</a></h3><ul><li>Objects: deep merge (right overrides left).</li><li>Arrays: replace by default; opt‑in behaviors per schema via <code>x-merge: { strategy: &#39;append&#39;|&#39;unique&#39;, key?: &#39;id&#39; }</code>.</li><li>Null/undefined: <code>undefined</code> means no override; <code>null</code> allowed only if permitted by schema.</li></ul><hr><h2 id="schema-definition-and-validation-patterns" tabindex="-1">Schema Definition and Validation Patterns <a class="header-anchor" href="#schema-definition-and-validation-patterns" aria-label="Permalink to &quot;Schema Definition and Validation Patterns&quot;">​</a></h2><h3 id="typescript-first-with-typebox-ajv" tabindex="-1">TypeScript-first with TypeBox + Ajv <a class="header-anchor" href="#typescript-first-with-typebox-ajv" aria-label="Permalink to &quot;TypeScript-first with TypeBox + Ajv&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// illustrative types</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Type, Static } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@sinclair/typebox&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Custom metadata keys used by ValidationEngine</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// x-sensitive: boolean, x-hotReload: &#39;never&#39;|&#39;safe&#39;|&#39;requires-restart&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// x-merge: { strategy: &#39;replace&#39;|&#39;append&#39;|&#39;unique&#39;, key?: string }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ServerSchema</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  maxConcurrent: Type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ minimum: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, default: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  idleTimeoutMs: Type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ minimum: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, default: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;x-hotReload&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;safe&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LoggingSchema</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  level: Type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Union</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Literal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;debug&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), Type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Literal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;info&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), Type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Literal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;warn&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), Type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Literal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;error&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ], { default: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;info&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;x-hotReload&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;safe&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  redact: Type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), { default: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;token&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;authorization&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;x-merge&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { strategy: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;append&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> SecretRefSchema</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Union</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ ref: Type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), required: Type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Optional</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ default: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })) }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    enc: Type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Literal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;v1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    kid: Type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    iv: Type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ct: Type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    tag: Type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Optional</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    createdAt: Type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Optional</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()),</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;x-sensitive&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> EffectiveConfigSchema</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  env: Type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ default: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;development&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  platform: Type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Union</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([Type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Literal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), Type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Literal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;workers&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)], { default: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  server: ServerSchema,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  logging: LoggingSchema,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  transports: Type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    http: Type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Optional</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ port: Type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ default: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8080</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;x-hotReload&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;requires-restart&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) })),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ws: Type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Optional</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ port: Type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ default: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8081</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;x-hotReload&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;requires-restart&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) })),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    stdio: Type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Optional</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ enabled: Type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ default: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;x-hotReload&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;never&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) }))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  auth: Type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    providers: Type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), { default: [] }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    audience: Type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Optional</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;x-hotReload&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;safe&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  routing: Type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    retry: Type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ default: {} }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    breaker: Type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ default: {} }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    lb: Type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Union</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      Type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Literal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;round_robin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), Type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Literal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;least_latency&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), Type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Literal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hashed&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ], { default: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;round_robin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;x-hotReload&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;safe&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  modules: Type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Record</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), Type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({})),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  secrets: Type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    dbPassword: Type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Optional</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SecretRefSchema),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    oauthClientSecret: Type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Optional</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SecretRefSchema),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EffectiveConfig</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EffectiveConfigSchema&gt;</span></span></code></pre></div><h3 id="validation-engine" tabindex="-1">Validation Engine <a class="header-anchor" href="#validation-engine" aria-label="Permalink to &quot;Validation Engine&quot;">​</a></h3><ul><li>Ajv configured in strict mode; compiled once at startup per schema version.</li><li>Custom keywords: <ul><li><code>x-sensitive</code> → used for redaction and access control.</li><li><code>x-hotReload</code> → drives RuntimeUpdater decisions.</li><li><code>x-merge</code> → merge strategy hints.</li></ul></li><li>Cross‑field invariants implemented as post‑validators (e.g., <code>http.port</code> != <code>ws.port</code>).</li></ul><h3 id="validation-reporting" tabindex="-1">Validation Reporting <a class="header-anchor" href="#validation-reporting" aria-label="Permalink to &quot;Validation Reporting&quot;">​</a></h3><ul><li>Structure: <code>{ path, keyword, message, valueSample, severity, suggestion }</code>.</li><li>Severity: <code>error</code> blocks apply; <code>warn</code> logs but continues (e.g., deprecated fields).</li><li>Suggestions derived from schema defaults and allowed enums.</li></ul><hr><h2 id="environment-management" tabindex="-1">Environment Management <a class="header-anchor" href="#environment-management" aria-label="Permalink to &quot;Environment Management&quot;">​</a></h2><h3 id="profiles-and-detection" tabindex="-1">Profiles and Detection <a class="header-anchor" href="#profiles-and-detection" aria-label="Permalink to &quot;Profiles and Detection&quot;">​</a></h3><ul><li>Profile detection: <code>MCP_ENV</code> preferred; fallback to <code>NODE_ENV</code>; default <code>development</code>.</li><li>Platform detection: during build/runtime via adapters: <code>&#39;node&#39;</code> or <code>&#39;workers&#39;</code>.</li></ul><h3 id="inheritance-and-overlays" tabindex="-1">Inheritance and Overlays <a class="header-anchor" href="#inheritance-and-overlays" aria-label="Permalink to &quot;Inheritance and Overlays&quot;">​</a></h3><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Effective = defaults</span></span>
<span class="line"><span>  → profile (development|test|staging|production)</span></span>
<span class="line"><span>  → platform overlay (node|workers)</span></span>
<span class="line"><span>  → files (e.g., config/production.yaml + config/local.yaml)</span></span>
<span class="line"><span>  → environment variables (MCP_*)</span></span>
<span class="line"><span>  → remote config (KV/SSM/etc.)</span></span>
<span class="line"><span>  → CLI flags</span></span>
<span class="line"><span>  → runtime overrides (admin API)</span></span></code></pre></div><h3 id="namespacing-and-platform-sections" tabindex="-1">Namespacing and Platform Sections <a class="header-anchor" href="#namespacing-and-platform-sections" aria-label="Permalink to &quot;Namespacing and Platform Sections&quot;">​</a></h3><ul><li>Dedicated platform sections: <code>platform.node</code>, <code>platform.workers</code>; non‑applicable keys ignored with warning.</li><li>Module configuration namespacing: <code>modules.&lt;moduleName&gt;.*</code> to isolate overrides and ACLs.</li></ul><hr><h2 id="secret-management-and-security-architecture" tabindex="-1">Secret Management and Security Architecture <a class="header-anchor" href="#secret-management-and-security-architecture" aria-label="Permalink to &quot;Secret Management and Security Architecture&quot;">​</a></h2><h3 id="threat-model-and-goals" tabindex="-1">Threat Model and Goals <a class="header-anchor" href="#threat-model-and-goals" aria-label="Permalink to &quot;Threat Model and Goals&quot;">​</a></h3><ul><li>Prevent plaintext secrets at rest in files or remote stores.</li><li>Minimize blast radius with key rotation and versioned encryption.</li><li>Ensure secrets never appear in logs, metrics, or error messages.</li><li>Control which components/principals may read specific secret scopes.</li></ul><h3 id="secret-representation" tabindex="-1">Secret Representation <a class="header-anchor" href="#secret-representation" aria-label="Permalink to &quot;Secret Representation&quot;">​</a></h3><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;enc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;v1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;kid&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;key-2025-08&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;iv&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;base64-iv&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;ct&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;base64-ciphertext&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;tag&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;base64-tag&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;createdAt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2025-08-15T10:00:00Z&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Or by reference:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;ref&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;secrets/primary/dbPassword&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><h3 id="secretmanager-interfaces" tabindex="-1">SecretManager Interfaces <a class="header-anchor" href="#secretmanager-interfaces" aria-label="Permalink to &quot;SecretManager Interfaces&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SecretManager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ref</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SecretRef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EncryptedValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  encrypt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">plain</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">opts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">kid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EncryptedValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  rotate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">kid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  keyring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Keyring</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Keyring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  current</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">kid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">keyBytes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ArrayBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  byId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">kid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ArrayBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  rotate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">newKey</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ArrayBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// returns new kid</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RemoteSecretsProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EncryptedValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="crypto-and-key-management" tabindex="-1">Crypto and Key Management <a class="header-anchor" href="#crypto-and-key-management" aria-label="Permalink to &quot;Crypto and Key Management&quot;">​</a></h3><ul><li>Algorithm: AES‑256‑GCM with random 96‑bit IV; HKDF for key derivation if required.</li><li>Node: Keyring backed by cloud KMS (preferred) or local dev key from <code>MCP_KMS_KEY</code>.</li><li>Workers: Use <code>crypto.subtle</code> WebCrypto; keys provisioned via Workers Secrets; store only encrypted payloads in KV.</li><li>Rotation: maintain <code>current</code> and <code>previous</code> keys; accept decrypt with both; re‑encrypt opportunistically.</li></ul><h3 id="redaction-and-access-control" tabindex="-1">Redaction and Access Control <a class="header-anchor" href="#redaction-and-access-control" aria-label="Permalink to &quot;Redaction and Access Control&quot;">​</a></h3><ul><li>Redaction: <code>ConfigManager.view({ redact: true })</code> masks any <code>x-sensitive</code> fields and SecretRefs.</li><li>Access control: section‑scoped ACLs, e.g., <code>auth.providers.*</code> readable by Auth service only.</li><li>Audit logging: append‑only records for read of sensitive sections (optional) and all writes; include actor, timestamp, diff summary, source, and outcome.</li></ul><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sequenceDiagram</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  participant C as Component</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  participant CFG as ConfigManager</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  participant SEC as SecretManager</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  C-&gt;&gt;CFG: get(&#39;secrets.dbPassword&#39;)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  CFG-&gt;&gt;SEC: resolve(ref or encrypted)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  SEC--&gt;&gt;CFG: plaintext (in-memory only)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  CFG--&gt;&gt;C: Scoped access token/secret</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Note right of CFG: Redact on logs &amp; traces</span></span></code></pre></div><hr><h2 id="configurationloader-and-merging" tabindex="-1">ConfigurationLoader and Merging <a class="header-anchor" href="#configurationloader-and-merging" aria-label="Permalink to &quot;ConfigurationLoader and Merging&quot;">​</a></h2><h3 id="loading-flow-startup" tabindex="-1">Loading Flow (Startup) <a class="header-anchor" href="#loading-flow-startup" aria-label="Permalink to &quot;Loading Flow (Startup)&quot;">​</a></h3><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sequenceDiagram</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  participant ENV as EnvironmentManager</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  participant L as ConfigurationLoader</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  participant V as ValidationEngine</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  participant S as SecretManager</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  participant CM as ConfigManager</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ENV--&gt;&gt;L: profile/platform</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  L-&gt;&gt;L: read defaults</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  L-&gt;&gt;L: read files (profile/platform)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  L-&gt;&gt;L: read env (MCP_*)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  L-&gt;&gt;L: read remote store</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  L-&gt;&gt;L: apply CLI flags</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  L-&gt;&gt;V: validate + invariants</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  V--&gt;&gt;L: typed config or errors</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  L-&gt;&gt;S: prefetch/verify required secret refs</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  L--&gt;&gt;CM: EffectiveConfig</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  CM--&gt;&gt;Consumers: typed access &amp; subscriptions</span></span></code></pre></div><h3 id="loading-flow-runtime-update" tabindex="-1">Loading Flow (Runtime Update) <a class="header-anchor" href="#loading-flow-runtime-update" aria-label="Permalink to &quot;Loading Flow (Runtime Update)&quot;">​</a></h3><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">flowchart LR</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Trigger((Change Trigger)) --&gt; Load[Load Deltas]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Load --&gt; Validate[Validate + Invariants]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Validate --&gt; Check[Check hot-reloadability]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Check --&gt;|safe| Apply[Atomic Apply]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Check --&gt;|unsafe| Queue[Queue for restart]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Apply --&gt; Notify[Notify Subscribers]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Apply --&gt; Audit[Audit Log]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Apply --&gt; Health[Health Update]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Validate --&gt;|fail| Rollback[Rollback]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Rollback --&gt; Audit</span></span></code></pre></div><h3 id="deterministic-merge" tabindex="-1">Deterministic Merge <a class="header-anchor" href="#deterministic-merge" aria-label="Permalink to &quot;Deterministic Merge&quot;">​</a></h3><ul><li>Implemented via a controlled deep‑merge with schema‑aware decisions.</li><li>Example policies: <ul><li><code>logging.redact</code> uses append semantics.</li><li><code>transports.*.port</code> is <code>requires-restart</code> and cannot change at runtime.</li><li><code>modules.*</code> treated as namespaced objects; per‑module keys may define their own <code>x-merge</code> rules.</li></ul></li></ul><hr><h2 id="runtimeupdater-hot‐reload-safety" tabindex="-1">RuntimeUpdater (Hot‑Reload) Safety <a class="header-anchor" href="#runtimeupdater-hot‐reload-safety" aria-label="Permalink to &quot;RuntimeUpdater (Hot‑Reload) Safety&quot;">​</a></h2><h3 id="constraints-and-policies" tabindex="-1">Constraints and Policies <a class="header-anchor" href="#constraints-and-policies" aria-label="Permalink to &quot;Constraints and Policies&quot;">​</a></h3><ul><li>Only fields tagged with <code>x-hotReload: &#39;safe&#39;</code> may change in place.</li><li>Fields tagged <code>requires-restart</code> are rejected at runtime and queued for the next restart rollout.</li><li><code>never</code> marks fields immutable post‑startup (e.g., <code>stdio.enabled</code>).</li><li>Rate limit updates per section (e.g., 1/minute) and overall (burst + token bucket).</li><li>Debounce rapid file changes; coalesce multiple changes into single apply.</li></ul><h3 id="atomic-apply-rollback" tabindex="-1">Atomic Apply + Rollback <a class="header-anchor" href="#atomic-apply-rollback" aria-label="Permalink to &quot;Atomic Apply + Rollback&quot;">​</a></h3><ul><li>Generation numbers for applied configs; each apply is transactional.</li><li>Two‑phase apply: <code>prepare(delta)</code> → <code>commit()</code>; subscribers can veto in <code>prepare</code>.</li><li>On failure: revert to previous generation; emit health warning and audit record.</li></ul><h3 id="subscriber-api-illustrative" tabindex="-1">Subscriber API (illustrative) <a class="header-anchor" href="#subscriber-api-illustrative" aria-label="Permalink to &quot;Subscriber API (illustrative)&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ConfigSubscriber</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> unknown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  selectors</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// e.g., [&#39;logging&#39;, &#39;routing&#39;]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  prepare</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">next</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EffectiveConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">prev</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EffectiveConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;{ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ok</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">reason</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  commit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">next</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EffectiveConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">prev</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EffectiveConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h2 id="cross‐platform-requirements" tabindex="-1">Cross‑Platform Requirements <a class="header-anchor" href="#cross‐platform-requirements" aria-label="Permalink to &quot;Cross‑Platform Requirements&quot;">​</a></h2><h3 id="abstractions" tabindex="-1">Abstractions <a class="header-anchor" href="#abstractions" aria-label="Permalink to &quot;Abstractions&quot;">​</a></h3><ul><li>StorageBackend: filesystem (Node) vs KV/DO (Workers) for config and state.</li><li>Watcher: chokidar (Node) vs poll/schedule (Workers).</li><li>Crypto: Node <code>crypto</code> vs WebCrypto <code>crypto.subtle</code>.</li><li>Clock/Timers: <code>setTimeout</code> vs Alarms/Scheduled triggers.</li></ul><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">flowchart TB</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Ports[Ports/Interfaces] --&gt; Node[Node Adapters]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Ports --&gt; Workers[Workers Adapters]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Ports --&gt; Cloud[Remote Stores]</span></span></code></pre></div><h3 id="platform-defaults" tabindex="-1">Platform Defaults <a class="header-anchor" href="#platform-defaults" aria-label="Permalink to &quot;Platform Defaults&quot;">​</a></h3><ul><li>Node: enable file source and watcher; prefer local files + cloud remote store; KMS for keys.</li><li>Workers: disable file source; enable KV/DO remote store; secrets in Workers Secrets; use ETag polling.</li></ul><hr><h2 id="error-handling-and-diagnostics" tabindex="-1">Error Handling and Diagnostics <a class="header-anchor" href="#error-handling-and-diagnostics" aria-label="Permalink to &quot;Error Handling and Diagnostics&quot;">​</a></h2><ul><li>Startup: if validation fails, emit structured errors with <code>path</code>, <code>message</code>, and <code>suggestion</code>; abort start.</li><li>Runtime: on update failure, rollback with reason; expose diagnostic snapshot with redaction.</li><li>Logging: structured logs with <code>configVersion</code>, <code>generation</code>, <code>source</code>, and <code>diffSummary</code>.</li><li>Metrics: counters for <code>config_apply_success</code>, <code>config_apply_failure</code>, <code>config_rollback</code>, <code>config_update_skipped</code>.</li></ul><hr><h2 id="security-and-compliance" tabindex="-1">Security and Compliance <a class="header-anchor" href="#security-and-compliance" aria-label="Permalink to &quot;Security and Compliance&quot;">​</a></h2><ul><li>Encryption at rest for any persisted sensitive value.</li><li>Strict redaction for logs/errors; configurable allow‑list for non‑sensitive paths.</li><li>Role‑based access control per section and per module namespace.</li><li>Audit log: append‑only, tamper‑evident if supported by backend (e.g., hash chaining or DO log with integrity checks).</li><li>Key rotation runbook: schedule, re‑encrypt secrets, dual‑read period, confirm, revoke old key.</li></ul><hr><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h2><h3 id="example-yaml-development" tabindex="-1">Example YAML (development) <a class="header-anchor" href="#example-yaml-development" aria-label="Permalink to &quot;Example YAML (development)&quot;">​</a></h3><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">development</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">node</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">logging</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  level</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">debug</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  redact</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;password&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;authorization&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  maxConcurrent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">64</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  idleTimeoutMs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30000</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">transports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  http</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8080</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">auth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  providers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">oauth</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      clientId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">my-client</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      clientSecret</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">secrets/oauth/devClientSecret</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  lb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">least_latency</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">secrets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  dbPassword</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">secrets/dev/dbPassword</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">modules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  tools.search</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    endpoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">https://search.local</span></span></code></pre></div><h3 id="environment-variable-overrides" tabindex="-1">Environment Variable Overrides <a class="header-anchor" href="#environment-variable-overrides" aria-label="Permalink to &quot;Environment Variable Overrides&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MCP_LOGGING__LEVEL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">info</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MCP_ROUTING__LB</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">round_robin</span></span></code></pre></div><h3 id="cli-overrides" tabindex="-1">CLI Overrides <a class="header-anchor" href="#cli-overrides" aria-label="Permalink to &quot;CLI Overrides&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dist/server.js</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --logging.level=warn</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --modules.tools.search.endpoint=https://search.prod</span></span></code></pre></div><h3 id="illustrative-initialization" tabindex="-1">Illustrative Initialization <a class="header-anchor" href="#illustrative-initialization" aria-label="Permalink to &quot;Illustrative Initialization&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> env</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> environmentManager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">detect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> loader</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ConfigurationLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ env, remote: myRemoteStore, files: myFiles })</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> loader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result.ok) { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result.errors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e.message).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> effectiveConfig</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result.value</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> configManager</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ConfigManager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(effectiveConfig, runtimeUpdater)</span></span></code></pre></div><hr><h2 id="integration-with-phase-5-components" tabindex="-1">Integration with Phase 5 Components <a class="header-anchor" href="#integration-with-phase-5-components" aria-label="Permalink to &quot;Integration with Phase 5 Components&quot;">​</a></h2><ul><li>ConfigManager remains the single injection point of <code>EffectiveConfig</code> and the subscription hub.</li><li>RuntimeUpdater emits component‑scoped <code>prepare/commit</code> callbacks to ProtocolHandler, RequestRouter, MultiAuthManager, ModuleLoader, etc.</li><li>SecretManager provided through DI with a platform‑specific Keyring.</li><li>ValidationEngine lives beside ConfigManager; schema and validators versioned and cached.</li></ul><hr><h2 id="deliverables-checklist" tabindex="-1">Deliverables Checklist <a class="header-anchor" href="#deliverables-checklist" aria-label="Permalink to &quot;Deliverables Checklist&quot;">​</a></h2><ul><li>ConfigurationSchema with TypeBox definitions and JSON Schema export.</li><li>ValidationEngine with Ajv + custom keywords (<code>x-sensitive</code>, <code>x-hotReload</code>, <code>x-merge</code>).</li><li>EnvironmentManager supporting profiles and platform overlays.</li><li>ConfigurationLoader with multi‑source parsing and deterministic merge.</li><li>SecretManager with encryption, SecretRef support, redaction, and key rotation.</li><li>RuntimeUpdater with hot‑reload safety, atomic apply, rollback, and audit logging.</li><li>Platform adapters for Node.js and Workers (files, KV, crypto, timers, watchers).</li></ul><hr><h2 id="appendix-hot‐reload-safety-matrix-illustrative" tabindex="-1">Appendix: Hot‑Reload Safety Matrix (Illustrative) <a class="header-anchor" href="#appendix-hot‐reload-safety-matrix-illustrative" aria-label="Permalink to &quot;Appendix: Hot‑Reload Safety Matrix (Illustrative)&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Section</th><th>Policy</th><th>Notes</th></tr></thead><tbody><tr><td>logging.level</td><td>safe</td><td>Immediate effect on logger</td></tr><tr><td>logging.redact</td><td>safe</td><td>Expand redact list</td></tr><tr><td>server.idleTimeoutMs</td><td>safe</td><td>Applies to new connections/sessions</td></tr><tr><td>transports.http.port</td><td>requires-restart</td><td>Requires listener rebind</td></tr><tr><td>transports.stdio</td><td>never</td><td>Static transport choice</td></tr><tr><td>routing.lb</td><td>safe</td><td>Router recomputes strategy</td></tr><tr><td>auth.providers</td><td>requires-restart</td><td>Re‑instantiate auth provider clients</td></tr><tr><td>modules.*</td><td>depends</td><td>Module declares policy per key</td></tr></tbody></table>`,115)]))}const c=i(t,[["render",l]]);export{E as __pageData,c as default};

import{_ as s,c as a,o as n,a6 as i}from"./chunks/framework.CHl2ywxc.js";const h=JSON.parse('{"title":"Master MCP Server — Phase 1 Architecture","description":"","frontmatter":{},"headers":[],"relativePath":"architecture/phase1-architecture.md","filePath":"architecture/phase1-architecture.md","lastUpdated":1755281500000}'),t={name:"architecture/phase1-architecture.md"};function l(r,e,o,p,c,d){return n(),a("div",null,e[0]||(e[0]=[i(`<h1 id="master-mcp-server-—-phase-1-architecture" tabindex="-1">Master MCP Server — Phase 1 Architecture <a class="header-anchor" href="#master-mcp-server-—-phase-1-architecture" aria-label="Permalink to &quot;Master MCP Server — Phase 1 Architecture&quot;">​</a></h1><p>This document defines the architectural foundation for Phase 1: Project Setup and Core Structure of the Master MCP Server. It consolidates the requirements from master-mcp-definition.md and incorporates the researcher agent’s recommendations from docs/research/phase1-analysis.md.</p><p>Goals</p><ul><li>Establish a clear, scalable directory structure with stable module boundaries</li><li>Define dependency relationships between modules and layers</li><li>Specify TypeScript configuration for Node and Cloudflare Workers</li><li>Architect core types and interfaces to unblock future phases</li><li>Describe the build toolchain and day-to-day dev workflow</li><li>Capture cross-platform deployment considerations (Cloudflare Workers, Koyeb, Docker)</li></ul><h2 id="project-structure" tabindex="-1">Project Structure <a class="header-anchor" href="#project-structure" aria-label="Permalink to &quot;Project Structure&quot;">​</a></h2><p>The repository follows a domain-first layout with runtime adapters. Pure logic and types live under src/, with small entrypoints per runtime.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>master-mcp-server/</span></span>
<span class="line"><span>├── src/</span></span>
<span class="line"><span>│   ├── index.ts                          # (Planned) core server bootstrap factory</span></span>
<span class="line"><span>│   ├── server/</span></span>
<span class="line"><span>│   │   ├── master-server.ts              # (Planned) master server orchestration</span></span>
<span class="line"><span>│   │   └── protocol-handler.ts           # Protocol handler (interfaces/stubs in Phase 1)</span></span>
<span class="line"><span>│   ├── modules/</span></span>
<span class="line"><span>│   │   ├── module-loader.ts              # (Interfaces in Phase 1) dynamic server loading</span></span>
<span class="line"><span>│   │   ├── capability-aggregator.ts      # (Interfaces in Phase 1) aggregate tools/resources</span></span>
<span class="line"><span>│   │   └── request-router.ts             # (Interfaces in Phase 1) route MCP calls to backends</span></span>
<span class="line"><span>│   ├── auth/</span></span>
<span class="line"><span>│   │   ├── multi-auth-manager.ts         # Stubs in Phase 1; full impl in Phase 2</span></span>
<span class="line"><span>│   │   ├── oauth-providers.ts            # Provider interfaces + placeholders</span></span>
<span class="line"><span>│   │   └── token-manager.ts              # In-memory token store + crypto helpers</span></span>
<span class="line"><span>│   ├── config/</span></span>
<span class="line"><span>│   │   └── config-loader.ts              # YAML/JSON config loader + validation hook</span></span>
<span class="line"><span>│   ├── types/</span></span>
<span class="line"><span>│   │   ├── config.ts                     # MasterConfig, ServerConfig, AuthStrategy, etc.</span></span>
<span class="line"><span>│   │   ├── auth.ts                       # OAuth token/delegation types</span></span>
<span class="line"><span>│   │   └── server.ts                     # LoadedServer, ServerCapabilities</span></span>
<span class="line"><span>│   ├── utils/</span></span>
<span class="line"><span>│   │   ├── logger.ts                     # pino-style logging adapter (extensible)</span></span>
<span class="line"><span>│   │   ├── crypto.ts                     # symmetric encrypt/decrypt wrappers</span></span>
<span class="line"><span>│   │   └── validators.ts                 # schema validators (zod-ready)</span></span>
<span class="line"><span>│   └── runtime/</span></span>
<span class="line"><span>│       ├── node.ts                       # (Planned) Node adapter (Express/Hono)</span></span>
<span class="line"><span>│       └── worker.ts                     # (Planned) Cloudflare Workers adapter</span></span>
<span class="line"><span>├── tests/                                 # Unit and integration tests (Phase 1 focus: types)</span></span>
<span class="line"><span>├── deploy/</span></span>
<span class="line"><span>│   ├── cloudflare/                        # wrangler.toml and worker build stubs (later)</span></span>
<span class="line"><span>│   ├── docker/                            # Dockerfile and compose examples</span></span>
<span class="line"><span>│   └── koyeb/                             # Procfile/service manifest examples</span></span>
<span class="line"><span>├── examples/</span></span>
<span class="line"><span>│   └── sample-configs/                    # Example MasterConfig files</span></span>
<span class="line"><span>├── docs/</span></span>
<span class="line"><span>│   ├── architecture/                      # This document</span></span>
<span class="line"><span>│   └── research/                          # phase1-analysis and future findings</span></span>
<span class="line"><span>├── tsconfig.base.json</span></span>
<span class="line"><span>├── tsconfig.node.json</span></span>
<span class="line"><span>├── tsconfig.worker.json</span></span>
<span class="line"><span>└── tsconfig.json</span></span></code></pre></div><p>Rationale</p><ul><li>Runtime adapters: Isolate Node vs Workers specifics (transports, HTTP servers, crypto, storage). Core remains runtime-agnostic.</li><li>Stable domains: server/, modules/, auth/, config/, utils/, types/ encourage clear ownership and testing.</li><li>Extensibility: module-loader and capability-aggregator are defined as interfaces now, implemented in Phase 3.</li><li>Testability: pure TypeScript modules with typed interfaces and inversion-of-control patterns ease mocking.</li></ul><h2 id="module-organization-and-dependencies" tabindex="-1">Module Organization and Dependencies <a class="header-anchor" href="#module-organization-and-dependencies" aria-label="Permalink to &quot;Module Organization and Dependencies&quot;">​</a></h2><p>Layers (outer depends on inner; inner never imports outer):</p><ul><li>types: pure types and enums only</li><li>utils: helpers with no business logic (crypto, logger, validation)</li><li>config: config loading/validation, depends on types and utils</li><li>auth: tokens and provider interfaces, depends on types/utils/config</li><li>modules: loader, capability aggregation, routing; depends on types/utils/config/auth</li><li>server: orchestration and protocol handlers; depends on types/utils/config/auth/modules</li><li>runtime: thin adapters (Node/Worker) wiring transports; depends on server (never the reverse)</li></ul><p>ASCII dependency diagram</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>runtime (node|worker)</span></span>
<span class="line"><span>        │</span></span>
<span class="line"><span>        ▼</span></span>
<span class="line"><span>     server ──► modules ──► auth ──► config ──► utils ──► types</span></span>
<span class="line"><span>        │                     │                     ▲</span></span>
<span class="line"><span>        │                     └────────────► types ─┘</span></span>
<span class="line"><span>        └──────────────────────────────► types</span></span></code></pre></div><p>Module boundaries</p><ul><li>server/protocol-handler.ts: owns MCP method bindings (list_tools, call_tool, list_resources, read_resource, subscribe). No runtime or network primitives inside; only uses module and auth interfaces.</li><li>modules/capability-aggregator.ts: composes backend capabilities; exposes aggregate view to server.</li><li>modules/module-loader.ts: resolves/launches MCP backend servers (types only now). Later supports git/npm/docker/local or remote endpoints.</li><li>modules/request-router.ts: routes MCP requests to the correct backend instance based on server id and capability mapping.</li><li>auth/multi-auth-manager.ts: prepares auth headers or delegation flows based on strategy (master_oauth, delegate_oauth, bypass_auth, proxy_oauth).</li><li>auth/oauth-providers.ts: per-provider token validation and userinfo fetch via provider-specific APIs.</li><li>auth/token-manager.ts: token encryption, storage abstraction; Phase 1 uses in-memory; later: KV/Redis/DOs.</li><li>config/config-loader.ts: loads and validates MasterConfig from YAML/JSON; supplies defaults.</li><li>utils/*: no imports from business modules; safe to use anywhere.</li></ul><p>Key rules</p><ul><li>One-way dependencies; avoid cycles by depending only inward.</li><li>No Node-only APIs in core (server/modules/auth/config/types/utils). Keep Node APIs in runtime/node.ts.</li><li>Protocol handler must not know about Express/Workers; it consumes pure interfaces.</li></ul><h2 id="typescript-configuration-architecture" tabindex="-1">TypeScript Configuration Architecture <a class="header-anchor" href="#typescript-configuration-architecture" aria-label="Permalink to &quot;TypeScript Configuration Architecture&quot;">​</a></h2><p>We use a base config plus per-runtime overlays, matching phase1-analysis recommendations and current files.</p><ul><li><p>tsconfig.base.json</p><ul><li>target: ES2022, module: ESNext, moduleResolution: NodeNext</li><li>strict TS flags enabled; declaration + sourceMap on</li><li>include: src/**; exclude: node_modules, dist, tests</li></ul></li><li><p>tsconfig.node.json</p><ul><li>extends base; outDir: dist/node</li><li>module/moduleResolution: NodeNext; lib: [ES2022]; types: [node]</li><li>purpose: Node builds (Koyeb/Docker, local dev, CLI)</li></ul></li><li><p>tsconfig.worker.json</p><ul><li>extends base; outDir: dist/worker</li><li>module: ESNext; moduleResolution: Bundler; lib: [ES2022, WebWorker, DOM]</li><li>purpose: Cloudflare Workers build</li></ul></li><li><p>tsconfig.json</p><ul><li>extends tsconfig.node.json for default tooling compatibility</li></ul></li></ul><p>Notes and options</p><ul><li>ESM-only: package.json uses &quot;type&quot;: &quot;module&quot;; prefer ESM across builds.</li><li>Path aliases (optional for later): add compilerOptions.paths to group domains (e.g., @core/*). Not required now to avoid churn.</li><li>SDK types: depend on @modelcontextprotocol/sdk types for request/response payloads when implementing handlers.</li><li>Cross-runtime crypto/JWT: consider using jose in later phases for Workers compatibility; current deps include jsonwebtoken which is Node-only.</li></ul><h2 id="core-type-system-and-interfaces-hierarchy" tabindex="-1">Core Type System and Interfaces Hierarchy <a class="header-anchor" href="#core-type-system-and-interfaces-hierarchy" aria-label="Permalink to &quot;Core Type System and Interfaces Hierarchy&quot;">​</a></h2><p>The types in src/types form the public contract across modules and over time. Phase 1 emphasizes stable shapes and minimal commitments.</p><p>Primary types (current files)</p><ul><li>MasterConfig: top-level configuration</li><li>ServerConfig: describes a single backend server and how to auth</li><li>AuthStrategy: enum of strategies (master_oauth, delegate_oauth, bypass_auth, proxy_oauth)</li><li>MasterAuthConfig (aka MasterOAuthConfig): OIDC/OAuth client config for master server</li><li>OAuthDelegationConfig: controls delegation behavior</li><li>HostingConfig: deployment metadata (platform, ports, base URL)</li><li>OAuthDelegation, OAuthToken, AuthHeaders, ClientInfo: auth-centric types</li><li>LoadedServer: runtime representation of a backend instance</li><li>ServerCapabilities: tools/resources/prompts aggregated from backends</li></ul><p>Conceptual relationships</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>MasterConfig</span></span>
<span class="line"><span> ├─ master_oauth: MasterAuthConfig</span></span>
<span class="line"><span> ├─ servers: ServerConfig[]</span></span>
<span class="line"><span> │    └─ auth_strategy: AuthStrategy</span></span>
<span class="line"><span> │       └─ auth_config?: ServerAuthConfig</span></span>
<span class="line"><span> ├─ oauth_delegation?: OAuthDelegationConfig</span></span>
<span class="line"><span> └─ hosting: HostingConfig</span></span>
<span class="line"><span></span></span>
<span class="line"><span>LoadedServer</span></span>
<span class="line"><span> ├─ config: ServerConfig</span></span>
<span class="line"><span> ├─ endpoint: string</span></span>
<span class="line"><span> └─ capabilities?: ServerCapabilities</span></span>
<span class="line"><span></span></span>
<span class="line"><span>MultiAuthManager (class)</span></span>
<span class="line"><span> ├─ prepareAuthForBackend(): AuthHeaders | OAuthDelegation</span></span>
<span class="line"><span> └─ validateClientToken(): Promise&lt;boolean&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ProtocolHandler (class)</span></span>
<span class="line"><span> ├─ handleListTools, handleCallTool, handleListResources, handleReadResource, handleSubscribe</span></span>
<span class="line"><span> └─ Depends on CapabilityAggregator + RequestRouter + MultiAuthManager</span></span></code></pre></div><p>Hierarchy/extension guidance</p><ul><li>Keep OAuth provider specifics behind interfaces (OAuthProvider). ServerAuthConfig carries provider config; provider impls map to concrete flows.</li><li>Token storage behind TokenManager; switchable backends in later phases (in-memory, KV, Redis, Durable Objects).</li><li>Capability aggregation returns a normalized ServerCapabilities shape for MCP exposure.</li></ul><h2 id="build-toolchain-and-development-workflow" tabindex="-1">Build Toolchain and Development Workflow <a class="header-anchor" href="#build-toolchain-and-development-workflow" aria-label="Permalink to &quot;Build Toolchain and Development Workflow&quot;">​</a></h2><p>Current scripts (package.json)</p><ul><li>clean: rimraf dist .turbo tsconfig.tsbuildinfo</li><li>typecheck: tsc -p tsconfig.node.json --noEmit</li><li>build: npm run build:node &amp;&amp; npm run build:worker</li><li>build:node: tsc -p tsconfig.node.json</li><li>build:worker: tsc -p tsconfig.worker.json</li><li>dev: ts-node --project tsconfig.node.json src/index.ts</li><li>lint: eslint . --ext .ts,.tsx</li><li>format: prettier --write .</li></ul><p>Recommendations (Phase 1)</p><ul><li>Keep tsc builds per-runtime as defined (fast and simple).</li><li>Consider adding tsup/esbuild in later phases for single-file Worker bundles (optional now).</li><li>Maintain separate dist outputs (dist/node, dist/worker) to avoid cross-runtime artifacts.</li><li>Prefer global fetch (Node &gt;=18) to ease Worker compatibility; avoid node-fetch in new code.</li><li>Prefer jose over jsonwebtoken when auth is implemented (Phase 2) for Workers support.</li></ul><p>Development flow</p><ul><li>Write runtime-agnostic logic in core modules, then wire in runtime adapters.</li><li>Use strict types; keep interfaces stable; add docs to public types.</li><li>Run lint/format/typecheck in CI and pre-commit hooks (husky installed).</li></ul><p>Testing strategy</p><ul><li>Unit test pure modules (types/utils/config/auth stubs) with mocks.</li><li>Integration tests later for protocol-handler with a fake module loader and in-memory token manager.</li><li>Avoid hitting real OAuth providers in tests; mock OAuthProvider and HTTP calls.</li></ul><h2 id="cross-platform-deployment-considerations" tabindex="-1">Cross-Platform Deployment Considerations <a class="header-anchor" href="#cross-platform-deployment-considerations" aria-label="Permalink to &quot;Cross-Platform Deployment Considerations&quot;">​</a></h2><p>Cloudflare Workers</p><ul><li>ESM only; no Node built-ins like fs/net/crypto randomBytes; use Web Crypto and fetch.</li><li>Build with tsconfig.worker.json; output to dist/worker; add wrangler.toml under deploy/cloudflare/.</li><li>Store tokens in Workers KV/DOs (later); TokenManager to provide a Workers implementation.</li><li>Logging via console or platform-specific sinks.</li></ul><p>Koyeb (Node container)</p><ul><li>Use dist/node build; run a small HTTP server (Express/Hono) in runtime/node.ts.</li><li>Env via process.env; secrets mounted via platform.</li><li>Token storage can be ephemeral (dev) or external (Redis/Postgres) in later phases.</li></ul><p>Docker</p><ul><li>Multi-stage Dockerfile: build (tsc) then runtime image with node:20-alpine.</li><li>Provide examples under deploy/docker/ including healthcheck and minimal CMD.</li><li>Mount config via bind or COPY; avoid secrets in images.</li></ul><p>Common concerns</p><ul><li>Observability: JSON logs (pino-style) with request IDs; health endpoint for Node runtime.</li><li>Configuration: prefer YAML/JSON with schema validation (zod) to catch misconfigs early.</li><li>Security: never log tokens; encrypt at rest; rotate keys; rate-limit auth endpoints.</li></ul><h2 id="scalability-testability-and-maintainability" tabindex="-1">Scalability, Testability, and Maintainability <a class="header-anchor" href="#scalability-testability-and-maintainability" aria-label="Permalink to &quot;Scalability, Testability, and Maintainability&quot;">​</a></h2><p>Scalability</p><ul><li>Module loader designed for heterogeneous backends (git/npm/docker/local/remote). Add workers/child-process orchestration later.</li><li>Capability aggregator composes many backends; design for lazy discovery and per-server caching.</li><li>Auth strategies encapsulated; easy to add new providers by extending OAuthProvider.</li></ul><p>Testability</p><ul><li>Inversion of control: inject TokenManager, OAuthProvider, and HTTP client into classes.</li><li>Keep side effects in runtime adapters; core remains pure and deterministically testable.</li><li>Provide thin interfaces per boundary (e.g., CapabilityAggregator) and test against them.</li></ul><p>Maintainability</p><ul><li>One-way dependencies reduce coupling and cycles.</li><li>Strict TS settings and clear types surface API changes quickly.</li><li>Small, focused modules with explicit public APIs ease refactors.</li></ul><h2 id="phase-1-deliverables-checklist" tabindex="-1">Phase 1 Deliverables Checklist <a class="header-anchor" href="#phase-1-deliverables-checklist" aria-label="Permalink to &quot;Phase 1 Deliverables Checklist&quot;">​</a></h2><ul><li>Directory structure and module boundaries defined (this doc)</li><li>Dependency diagram and layering rules established</li><li>TypeScript config architecture documented (base + node + worker)</li><li>Core types and interface hierarchy articulated</li><li>Build toolchain and dev workflow described</li><li>Cross-platform considerations captured for Workers, Koyeb, Docker</li></ul><h2 id="appendix-future-phase-hooks-non-binding" tabindex="-1">Appendix: Future Phase Hooks (Non-binding) <a class="header-anchor" href="#appendix-future-phase-hooks-non-binding" aria-label="Permalink to &quot;Appendix: Future Phase Hooks (Non-binding)&quot;">​</a></h2><ul><li>Authentication (Phase 2): implement MultiAuthManager with jose, token refresh, and provider integrations.</li><li>Module Loading (Phase 3): implement ModuleLoader with process management or remote adapters.</li><li>Protocol Wiring (Phase 4): bind MCP handlers to transports (stdio/ws/http) in runtime adapters.</li><li>Persistence (Phase 7+): TokenManager backends (KV/Redis/DOs), audit logging, metrics.</li></ul>`,60)]))}const m=s(t,[["render",l]]);export{h as __pageData,m as default};

import{_ as a,c as e,o as n,a6 as t,j as s}from"./chunks/framework.CHl2ywxc.js";const E=JSON.parse('{"title":"Master MCP Server — Phase 1 Analysis (Project Setup and Core Structure)","description":"","frontmatter":{},"headers":[],"relativePath":"research/phase1-analysis.md","filePath":"research/phase1-analysis.md","lastUpdated":1755281500000}'),l={name:"research/phase1-analysis.md"};function p(h,i,r,o,k,d){return n(),e("div",null,i[0]||(i[0]=[t(`<h1 id="master-mcp-server-—-phase-1-analysis-project-setup-and-core-structure" tabindex="-1">Master MCP Server — Phase 1 Analysis (Project Setup and Core Structure) <a class="header-anchor" href="#master-mcp-server-—-phase-1-analysis-project-setup-and-core-structure" aria-label="Permalink to &quot;Master MCP Server — Phase 1 Analysis (Project Setup and Core Structure)&quot;">​</a></h1><p>This document analyzes Phase 1 requirements from <code>master-mcp-definition.md</code>, provides MCP SDK integration guidance, TypeScript setup best practices, early multi-auth/OAuth design considerations, dependency recommendations, and risks specific to the Phase 1 scope. Deployment target nuances (Cloudflare Workers, Koyeb, Docker) are called out where they affect setup decisions.</p><h2 id="phase-1-scope-extract-from-master-mcp-definition-md" tabindex="-1">Phase 1 Scope Extract (from master-mcp-definition.md) <a class="header-anchor" href="#phase-1-scope-extract-from-master-mcp-definition-md" aria-label="Permalink to &quot;Phase 1 Scope Extract (from master-mcp-definition.md)&quot;">​</a></h2><ul><li>Project goal: A Master MCP Server aggregating multiple MCP servers behind a single endpoint with flexible auth strategies.</li><li>Tech stack: TypeScript/Node.js with MCP SDK. Targets: Cloudflare Workers, Koyeb, Docker.</li><li>Phase 1 tasks: <ul><li>Initialize project structure (directories, entry points, scaffolds).</li><li>Install base dependencies and TypeScript tooling.</li><li>Define core types and interfaces under <code>src/types</code>: <ul><li><code>config.ts</code>: <code>MasterConfig</code>, <code>ServerConfig</code>, <code>AuthStrategy</code>, etc.</li><li><code>auth.ts</code>: <code>AuthHeaders</code>, <code>OAuthDelegation</code>, <code>OAuthToken</code>, etc.</li><li><code>server.ts</code>: <code>LoadedServer</code>, <code>ServerCapabilities</code>, etc.</li></ul></li></ul></li><li>Non-goals in Phase 1 (prepare but do not implement): <ul><li>Multi-auth logic internals, OAuth providers, token storage.</li><li>Module loading, capability aggregation, request routing, protocol handler.</li><li>Runtime behaviors (health checks, restarts, end-to-end OAuth flows).</li></ul></li></ul><p>Implication: Phase 1 focuses on a clean, future-proof structure, environment/tooling, and accurate type contracts to unblock Phases 2–5 without rework.</p><h2 id="recommended-project-structure-phase-1" tabindex="-1">Recommended Project Structure (Phase 1) <a class="header-anchor" href="#recommended-project-structure-phase-1" aria-label="Permalink to &quot;Recommended Project Structure (Phase 1)&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>master-mcp-server/</span></span>
<span class="line"><span>├── src/</span></span>
<span class="line"><span>│   ├── index.ts                  # Entry (stdio/WS bootstrap behind feature flags)</span></span>
<span class="line"><span>│   ├── server/</span></span>
<span class="line"><span>│   │   ├── master-server.ts      # Class stub + constructor wiring (no logic yet)</span></span>
<span class="line"><span>│   │   └── protocol-handler.ts   # Method signatures only</span></span>
<span class="line"><span>│   ├── auth/</span></span>
<span class="line"><span>│   │   ├── multi-auth-manager.ts # Stub with method signatures</span></span>
<span class="line"><span>│   │   ├── oauth-providers.ts    # Interfaces + stubs</span></span>
<span class="line"><span>│   │   └── token-manager.ts      # Interfaces + stubs</span></span>
<span class="line"><span>│   ├── modules/</span></span>
<span class="line"><span>│   │   ├── module-loader.ts      # Interfaces + stubs</span></span>
<span class="line"><span>│   │   ├── capability-aggregator.ts</span></span>
<span class="line"><span>│   │   └── request-router.ts</span></span>
<span class="line"><span>│   ├── types/</span></span>
<span class="line"><span>│   │   ├── config.ts             # Phase 1: define types</span></span>
<span class="line"><span>│   │   ├── auth.ts               # Phase 1: define types</span></span>
<span class="line"><span>│   │   └── server.ts             # Phase 1: define types</span></span>
<span class="line"><span>│   ├── utils/</span></span>
<span class="line"><span>│   │   ├── logger.ts             # Stub with no-op logging in Phase 1</span></span>
<span class="line"><span>│   │   ├── crypto.ts             # Stub with unimplemented methods</span></span>
<span class="line"><span>│   │   └── validators.ts         # Basic runtime checks for config</span></span>
<span class="line"><span>│   └── config/</span></span>
<span class="line"><span>│       └── config-loader.ts      # Signatures + minimal env-based loader</span></span>
<span class="line"><span>├── tests/                        # Placeholder; no full tests in Phase 1</span></span>
<span class="line"><span>├── deploy/</span></span>
<span class="line"><span>│   ├── cloudflare/               # wrangler.toml + worker entry stub in later phase</span></span>
<span class="line"><span>│   ├── docker/                   # Dockerfile in later phase</span></span>
<span class="line"><span>│   └── koyeb/                    # Procfile/manifest in later phase</span></span>
<span class="line"><span>├── examples/</span></span>
<span class="line"><span>│   └── sample-configs/           # Minimal example YAML later</span></span>
<span class="line"><span>├── package.json</span></span>
<span class="line"><span>├── tsconfig.json</span></span>
<span class="line"><span>└── README.md</span></span></code></pre></div><p>Notes:</p><ul><li>Keep all code ESM-first to support Workers and modern Node.</li><li>Separate transport/bootstrap concerns (stdio/WS/SSE/Workers) from core classes so deployments swap adapters without touching business logic.</li></ul><h2 id="mcp-sdk-integration-recommendations" tabindex="-1">MCP SDK Integration Recommendations <a class="header-anchor" href="#mcp-sdk-integration-recommendations" aria-label="Permalink to &quot;MCP SDK Integration Recommendations&quot;">​</a></h2><ul><li>SDK: <code>@modelcontextprotocol/sdk</code> (ESM). Design around transports: <ul><li>Local/dev: <code>StdioServerTransport</code> for easy testing with MCP clients.</li><li>Remote: WebSocket or SSE transports for HTTP-based runtime (Koyeb/Docker). Workers require HTTP/WebSocket/SSE; no stdio and no child processes.</li></ul></li><li>Server composition pattern: <ul><li>Create a <code>MasterMcpServer</code> with injected dependencies (module loader, auth manager, request router, capability aggregator, protocol handler). In Phase 1, wire classes and method signatures only.</li><li>Expose a function to “mount” server on a transport; keep transport-specific code in <code>src/index.ts</code> (Node) and a separate Workers entry (later phase) to avoid platform conditionals in core.</li></ul></li></ul><p>Example bootstrap (Node stdio) for Phase 1 scaffolding:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// src/index.ts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { McpServer } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@modelcontextprotocol/sdk/server/mcp.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { StdioServerTransport } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@modelcontextprotocol/sdk/server/stdio.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { MasterMcpServer } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./server/master-server.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { MasterConfig } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./types/config.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MasterConfig</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Minimal placeholder that validates Phase 1 types</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  master_oauth: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  servers: [],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  hosting: { platform: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> underlying</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> McpServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;master-mcp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, version: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0.1.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> master</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MasterMcpServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config, underlying);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // master.initialize() comes in later phases</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> transport</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StdioServerTransport</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  underlying.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">connect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(transport);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Fatal startup error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, err);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>Key practices:</p><ul><li>ESM-only imports (<code>.js</code> extensions in TS path output) to keep compatibility with Workers bundlers.</li><li>Do not leak Node-only APIs into core classes; isolate them in adapters.</li><li>Define strict request/response types aligned with MCP schema; validate at boundaries.</li></ul><h2 id="typescript-setup-best-practices" tabindex="-1">TypeScript Setup Best Practices <a class="header-anchor" href="#typescript-setup-best-practices" aria-label="Permalink to &quot;TypeScript Setup Best Practices&quot;">​</a></h2><ul><li>Compiler settings: <ul><li><code>target</code>: <code>ES2022</code> or higher; <code>module</code>: <code>ESNext</code>; <code>moduleResolution</code>: <code>bundler</code> or <code>nodenext</code>.</li><li><code>strict</code>: <code>true</code>; <code>noUncheckedIndexedAccess</code>: <code>true</code>; <code>exactOptionalPropertyTypes</code>: <code>true</code>.</li><li><code>declaration</code>: <code>true</code> if publishing; otherwise optional.</li><li><code>outDir</code>: <code>dist</code>; <code>rootDir</code>: <code>src</code>.</li><li>Path aliases for folders you own; avoid aliasing external packages.</li></ul></li><li>Package type: set <code>&quot;type&quot;: &quot;module&quot;</code> in <code>package.json</code> for ESM.</li><li>Linting/formatting: ESLint with TypeScript plugin + Prettier.</li><li>Bundling: <code>tsup</code> or <code>esbuild</code> for Node/Koyeb/Docker images. For Workers, rely on <code>wrangler</code> bundler.</li><li>Testing: <code>vitest</code> (fast, ESM-friendly), with <code>tsconfig.spec.json</code> extending the base.</li></ul><p>Minimal tsconfig suggestion (Phase 1):</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;extends&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./tsconfig.base.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;compilerOptions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;target&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ES2022&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;module&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ESNext&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;moduleResolution&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bundler&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;strict&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;noUncheckedIndexedAccess&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;exactOptionalPropertyTypes&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;skipLibCheck&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;outDir&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dist&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;rootDir&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;src&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;types&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: []</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;include&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;src&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Minimal package.json fields:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;master-mcp-server&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0.1.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;private&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;module&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tsup src/index.ts --format esm --out-dir dist --dts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;dev&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tsx src/index.ts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;lint&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;eslint .&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;typecheck&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tsc --noEmit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vitest&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;devDependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;@types/node&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^20&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;eslint&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^9&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;eslint-config-prettier&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^9&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;eslint-plugin-import&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;prettier&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;tsup&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;tsx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;typescript&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^5&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;vitest&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^2&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;dependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;@modelcontextprotocol/sdk&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Notes:</p><ul><li><code>@modelcontextprotocol/sdk</code> version pinned to the latest major 0.x; exact pin to be decided when initializing the repo to match client expectations.</li><li>Prefer native <code>fetch</code> on Node 18+ instead of <code>node-fetch</code>. Workers already provide <code>fetch</code>.</li></ul><h2 id="multi-auth-and-oauth-considerations-phase-1-design" tabindex="-1">Multi-Auth and OAuth Considerations (Phase 1 Design) <a class="header-anchor" href="#multi-auth-and-oauth-considerations-phase-1-design" aria-label="Permalink to &quot;Multi-Auth and OAuth Considerations (Phase 1 Design)&quot;">​</a></h2><p>Phase 1 defines types and high-level contracts; implementation comes in Phase 2. Decisions now affect portability and security:</p><ul><li>Token handling library: prefer <code>jose</code> for JWT verification/signing across Node and Workers. Avoid Node-only modules (<code>jsonwebtoken</code>) to keep Workers compatibility.</li><li>OAuth client implementation: prefer the standards-based <code>oauth4webapi</code> (runs in browsers/Workers/Node) over <code>openid-client</code> for portability. Use it in later phases to implement PKCE and OIDC discovery.</li><li>Storage abstraction: define a simple token storage interface now so Workers (KV/Durable Objects), Docker/Koyeb (filesystem/Redis/Postgres) can plug in later. In Phase 1, only define the interfaces.</li><li>Strategies alignment with spec (<code>AuthStrategy</code>): <ul><li><code>MASTER_OAUTH</code>: validate client JWT with master issuer; inject as bearer to backends that accept it.</li><li><code>DELEGATE_OAUTH</code>: server-specific OAuth via redirect; store per-client per-server token mapping.</li><li><code>PROXY_OAUTH</code>: exchange or forward client token to backend (introspect, map scopes).</li><li><code>BYPASS_AUTH</code>: no auth added by master for that backend.</li></ul></li><li>Security primitives to encode in types: <ul><li>State/nonce (base64url) and PKCE (<code>code_verifier</code>/<code>code_challenge</code>).</li><li><code>expires_at</code> numeric epoch milliseconds; clock skew handling added later.</li><li>Strong key management and at-rest encryption for tokens (handled later by <code>CryptoUtils</code>).</li></ul></li></ul><p>Type hints to ground Phase 1:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// src/types/auth.ts additions to ensure portability</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OAuthState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// base64url encoded</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  issuedAt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// epoch ms</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  audience</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// optional routing context</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ClientInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  clientId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  redirectUri</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="dependency-analysis-and-recommendations" tabindex="-1">Dependency Analysis and Recommendations <a class="header-anchor" href="#dependency-analysis-and-recommendations" aria-label="Permalink to &quot;Dependency Analysis and Recommendations&quot;">​</a></h2><p>Cross-platform constraints and suggested choices for Phase 1 (scaffolding):</p><ul><li>MCP SDK: <ul><li>Use <code>@modelcontextprotocol/sdk</code> (ESM). Avoid Node-only transports in core code. Keep transport-specific code in adapters.</li></ul></li><li>HTTP/Router: <ul><li>For Node/Koyeb/Docker: you can use a lightweight router if needed later (e.g., <code>hono</code>, <code>elysia</code>, or <code>express</code>). However, Express does not run on Workers; prefer <code>hono</code> for cross-platform HTTP endpoints (OAuth callbacks) in later phases. Phase 1 can skip installing any HTTP framework.</li></ul></li><li>Fetch: <ul><li>Use global <code>fetch</code> (Node 18+ and Workers). Avoid <code>node-fetch</code> dependency.</li></ul></li><li>JWT/OIDC: <ul><li>Prefer <code>jose</code> and <code>oauth4webapi</code> for portability. Avoid <code>jsonwebtoken</code>.</li></ul></li><li>YAML/config: <ul><li>Use <code>yaml</code> or <code>js-yaml</code> for YAML. Workers can’t <code>fs.readFile</code> in runtime; plan for env-based config on Workers.</li></ul></li><li>Logging: <ul><li>Use a minimal in-house logger in Phase 1; consider <code>pino</code> later for Node-only deployments if needed.</li></ul></li></ul><p>Suggested initial dependency set for Phase 1 (keep lean):</p><ul><li>dependencies: <code>@modelcontextprotocol/sdk</code></li><li>devDependencies: <code>typescript</code>, <code>tsup</code>, <code>tsx</code>, <code>eslint</code>, <code>prettier</code>, <code>vitest</code>, <code>@types/node</code></li></ul><p>Platform versions:</p><ul><li>Node: 18.18+ (native fetch, WHATWG URL) or 20.x LTS preferred.</li><li>Cloudflare Workers: latest; develop using <code>wrangler</code> 3.x in a later phase.</li></ul><h2 id="deployment-target-considerations-affecting-setup" tabindex="-1">Deployment Target Considerations (Affecting Setup) <a class="header-anchor" href="#deployment-target-considerations-affecting-setup" aria-label="Permalink to &quot;Deployment Target Considerations (Affecting Setup)&quot;">​</a></h2><ul><li>Cloudflare Workers: <ul><li>No <code>child_process</code>, no filesystem writes, no TCP sockets; can’t spawn backend MCP servers. Master must operate as a pure HTTP/WebSocket/SSE router in Workers deployments. Design core to support a “remote-only” server mode.</li><li>ESM required; use durable storage (KV, DOs, D1) for tokens in later phases.</li></ul></li><li>Koyeb (Node runtime) and Docker: <ul><li>Full Node APIs available; module loader can spawn child processes for local MCP servers in later phases.</li><li>Ship ESM bundle. Expose HTTP port for WebSocket/SSE based MCP transport and OAuth callbacks.</li></ul></li></ul><p>Design decision for Phase 1: Ensure the <code>ModuleLoader</code> and <code>TokenManager</code> are interfaces with pluggable implementations so Workers builds can exclude Node-only behavior.</p><h2 id="example-interfaces-scaffolds-for-phase-1" tabindex="-1">Example Interfaces/Scaffolds for Phase 1 <a class="header-anchor" href="#example-interfaces-scaffolds-for-phase-1" aria-label="Permalink to &quot;Example Interfaces/Scaffolds for Phase 1&quot;">​</a></h2><p>Master server constructor pattern:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// src/server/master-server.ts (Phase 1 skeleton)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { MasterConfig } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;../types/config.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { McpServer } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@modelcontextprotocol/sdk/server/mcp.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MasterMcpServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MasterConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> mcp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> McpServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Phase 1: only declare methods</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> initialize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  private</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setupRequestHandlers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> shutdown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Validators to keep contracts honest:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// src/utils/validators.ts (Phase 1 minimal)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { MasterConfig } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;../types/config.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> assertValidMasterConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">cfg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MasterConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cfg) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MasterConfig required&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Array.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cfg.servers)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;servers must be array&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="risk-assessment-phase-1" tabindex="-1">Risk Assessment (Phase 1) <a class="header-anchor" href="#risk-assessment-phase-1" aria-label="Permalink to &quot;Risk Assessment (Phase 1)&quot;">​</a></h2><ul><li>ESM/CJS incompatibility: Using ESM-only is necessary for Workers. Some Node libraries (e.g., <code>jsonwebtoken</code>, <code>express</code> middlewares) may expect CJS; avoid them.</li><li>Transport fragmentation: stdio vs WS/SSE require different bootstraps. Mitigate by isolating transports and keeping the core server transport-agnostic.</li><li>Multi-platform constraints: Workers cannot spawn processes or read local files. Design module loading and config loading as interfaces with platform-specific implementations later.</li><li>Dependency bloat: Installing Node-only HTTP frameworks or <code>node-fetch</code> in Phase 1 risks future refactors. Keep dependencies minimal and portable.</li><li>OAuth complexity: Picking incompatible OAuth/JWT libs early leads to rewrites. Choose <code>jose</code> + <code>oauth4webapi</code> to cover Node and Workers from the start.</li><li>Version drift in MCP SDK: Pin a caret range and track notable breaking changes; create an SDK adapter layer if possible.</li></ul><p>Mitigations embodied in Phase 1:</p><ul><li>ESM-only project, strict TS, minimal deps, interfaces-first for auth/storage/module loading, transport adapters.</li></ul><h2 id="concrete-phase-1-checklist" tabindex="-1">Concrete Phase 1 Checklist <a class="header-anchor" href="#concrete-phase-1-checklist" aria-label="Permalink to &quot;Concrete Phase 1 Checklist&quot;">​</a></h2><ul><li>Initialize repository with ESM TypeScript, strict settings, and minimal toolchain.</li><li>Create directory structure and stub files as per <code>master-mcp-definition.md</code>.</li><li>Implement the <code>types</code> modules (<code>config.ts</code>, <code>auth.ts</code>, <code>server.ts</code>) exactly per spec.</li><li>Add scaffolding for <code>index.ts</code> to create an MCP server instance and connect a stdio transport (no-op handlers yet).</li><li>Add minimal validators and logger stubs to help later phases.</li><li>Document platform constraints and dependency choices in README.</li></ul><h2 id="appendix-suggested-files-to-author-in-phase-1" tabindex="-1">Appendix: Suggested Files to Author in Phase 1 <a class="header-anchor" href="#appendix-suggested-files-to-author-in-phase-1" aria-label="Permalink to &quot;Appendix: Suggested Files to Author in Phase 1&quot;">​</a></h2>`,50),s("ul",null,[s("li",null,"tsconfig.json, package.json, README.md"),s("li",null,"src/index.ts"),s("li",{"config.ts,auth.ts,server.ts":""},"src/types/"),s("li",{"master-server.ts,protocol-handler.ts":""},"src/server/"),s("li",{"module-loader.ts,capability-aggregator.ts,request-router.ts":""},"src/modules/"),s("li",{"multi-auth-manager.ts,oauth-providers.ts,token-manager.ts":""},"src/auth/"),s("li",{"logger.ts,crypto.ts,validators.ts":""},"src/utils/"),s("li",null,"deploy placeholders (no runtime content yet)")],-1),s("p",null,"These stubs allow Phases 2–5 to proceed without structural churn while keeping deployment options open across Workers, Koyeb, and Docker.",-1)]))}const g=a(l,[["render",p]]);export{E as __pageData,g as default};

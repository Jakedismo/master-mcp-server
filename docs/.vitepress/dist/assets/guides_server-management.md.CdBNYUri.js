import{_ as a,c as r,o as t,a6 as o}from"./chunks/framework.CHl2ywxc.js";const h=JSON.parse('{"title":"Server Management","description":"","frontmatter":{},"headers":[],"relativePath":"guides/server-management.md","filePath":"guides/server-management.md","lastUpdated":1755281500000}'),n={name:"guides/server-management.md"};function d(s,e,i,c,l,u){return t(),r("div",null,e[0]||(e[0]=[o('<h1 id="server-management" tabindex="-1">Server Management <a class="header-anchor" href="#server-management" aria-label="Permalink to &quot;Server Management&quot;">​</a></h1><p>The <code>MasterServer</code> orchestrates backend servers and exposes convenience APIs.</p><h2 id="key-apis" tabindex="-1">Key APIs <a class="header-anchor" href="#key-apis" aria-label="Permalink to &quot;Key APIs&quot;">​</a></h2><ul><li><code>startFromConfig(config, clientToken?)</code>: Load and health-check backends, discover capabilities</li><li><code>performHealthChecks(clientToken?)</code>: Returns <code>{ [serverId]: boolean }</code></li><li><code>restartServer(id)</code>: Restarts a backend (when supported)</li><li><code>unloadAll()</code>: Stops and clears all backends</li><li><code>getRouter()</code>: Access to <code>RequestRouter</code></li><li><code>getAggregatedTools()/getAggregatedResources()</code>: Current aggregated definitions</li><li><code>attachAuthManager(multiAuth)</code>: Injects a <code>MultiAuthManager</code></li><li><code>getOAuthFlowController()</code>: Provides an OAuth controller to mount in your runtime</li></ul><h2 id="node-runtime" tabindex="-1">Node Runtime <a class="header-anchor" href="#node-runtime" aria-label="Permalink to &quot;Node Runtime&quot;">​</a></h2><p><code>src/index.ts</code> creates an Express app exposing health, metrics, OAuth endpoints, and MCP HTTP endpoints. Use <code>npm run dev</code> during development.</p><h2 id="workers-runtime" tabindex="-1">Workers Runtime <a class="header-anchor" href="#workers-runtime" aria-label="Permalink to &quot;Workers Runtime&quot;">​</a></h2><p><code>src/runtime/worker.ts</code> exports a <code>fetch</code> handler integrating the protocol and OAuth flows. Configure via <code>deploy/cloudflare/wrangler.toml</code>.</p>',8)]))}const p=a(n,[["render",d]]);export{h as __pageData,p as default};

import{_ as o,c as i,o as t,a6 as a}from"./chunks/framework.CHl2ywxc.js";const m=JSON.parse('{"title":"Phase 10 — Deployment Architecture","description":"","frontmatter":{},"headers":[],"relativePath":"architecture/phase10-deployment-architecture.md","filePath":"architecture/phase10-deployment-architecture.md","lastUpdated":1755281500000}'),l={name:"architecture/phase10-deployment-architecture.md"};function r(n,e,c,d,s,u){return t(),i("div",null,e[0]||(e[0]=[a('<h1 id="phase-10-—-deployment-architecture" tabindex="-1">Phase 10 — Deployment Architecture <a class="header-anchor" href="#phase-10-—-deployment-architecture" aria-label="Permalink to &quot;Phase 10 — Deployment Architecture&quot;">​</a></h1><p>This document defines the production-ready deployment architecture for the Master MCP Server across Docker, Cloudflare Workers, and Koyeb, including CI/CD, environment and secrets management, and monitoring/HA considerations. It builds on Phases 1–9 (auth, module loading, routing, config management, OAuth flows, utilities, and testing).</p><h2 id="objectives" tabindex="-1">Objectives <a class="header-anchor" href="#objectives" aria-label="Permalink to &quot;Objectives&quot;">​</a></h2><ul><li>Cross‑platform deployment for Node (Docker/Koyeb) and Workers using a shared codebase.</li><li>Multi-arch container strategy with small, secure images and health checks.</li><li>Workers ESM bundle with runtime-specific adaptations.</li><li>CI/CD that tests, scans, builds, and deploys to all targets.</li><li>Environment and secrets management with platform‑specific guidance.</li><li>Production monitoring, logging, and HA scaling strategy.</li></ul><hr><h2 id="build-system-design" tabindex="-1">Build System Design <a class="header-anchor" href="#build-system-design" aria-label="Permalink to &quot;Build System Design&quot;">​</a></h2><ul><li>Single codebase targeting two runtimes: <ul><li>Node runtime → <code>tsconfig.node.json</code> outputs to <code>dist/node</code> (ESM, NodeNext).</li><li>Workers runtime → <code>tsconfig.worker.json</code> outputs to <code>dist/worker</code> (ESM, WebWorker libs).</li></ul></li><li>Entry points: <ul><li>Node: <code>dist/node/index.js</code> bootstraps Express server and HTTP endpoints (e.g., <code>/health</code>).</li><li>Workers: <code>src/runtime/worker.ts</code> exports <code>{ fetch(req) { … } }</code> for Cloudflare.</li></ul></li><li>Deterministic builds via <code>npm ci</code>, TypeScript compile gates (<code>typecheck</code>), and linting.</li><li>Artifact separation to keep runtimes decoupled and avoid Node‑only APIs in Workers.</li></ul><hr><h2 id="container-architecture-docker" tabindex="-1">Container Architecture (Docker) <a class="header-anchor" href="#container-architecture-docker" aria-label="Permalink to &quot;Container Architecture (Docker)&quot;">​</a></h2><ul><li>Multi-stage Dockerfile (builder → runtime) using Node 20 slim.</li><li>Production image contains only <code>dist/node</code>, production deps, <code>config/</code>, and a tiny entrypoint.</li><li>Non‑root user, read‑only filesystem where possible, pinned NODE_ENV.</li><li>Health check: HTTP GET <code>GET /health</code> using a Node-based healthcheck command to avoid extra packages.</li><li>Resource controls via runtime flags and orchestrator level (memory, CPU). Suggested defaults provided below.</li></ul><p>Image layout and behavior:</p><ul><li><code>ENTRYPOINT</code> script maps PaaS <code>PORT</code> → <code>MASTER_HOSTING_PORT</code> automatically when needed.</li><li>Exposes <code>3000</code> by default; honors <code>PORT</code> when provided (Koyeb/Cloud). Config loader also respects <code>PORT</code>.</li><li>Config resolution order: CLI args → env overrides → <code>config/default.json</code>/<code>config/&lt;env&gt;.json</code> as per Phase 7–8 config subsystem.</li></ul><p>Security and size optimizations:</p><ul><li>Only <code>npm ci --omit=dev</code> in runtime stage; builder caches deps to speed up builds.</li><li>Drop root privileges, set <code>NODE_ENV=production</code>, and default to JSON logs in production.</li></ul><hr><h2 id="cloudflare-workers-architecture" tabindex="-1">Cloudflare Workers Architecture <a class="header-anchor" href="#cloudflare-workers-architecture" aria-label="Permalink to &quot;Cloudflare Workers Architecture&quot;">​</a></h2><ul><li>ESM Worker using <code>wrangler.toml</code> with <code>main = &quot;src/runtime/worker.ts&quot;</code>.</li><li>Build modes: <ul><li>Local dev/tests: <code>vitest -c vitest.worker.config.ts</code> (Miniflare env), or <code>wrangler dev</code>.</li><li>Deploy: <code>wrangler deploy --env &lt;staging|production&gt;</code>.</li></ul></li><li>Workers runtime adaptations already present: <ul><li>Dedicated <code>src/runtime/worker.ts</code> to handle OAuth routes and return lightweight responses.</li><li>Worker build excludes Node-only modules via <code>tsconfig.worker.json</code>.</li></ul></li><li>Environment and secrets via Wrangler: <ul><li><code>vars</code> for non-sensitive configuration (e.g., <code>MASTER_BASE_URL</code>, feature flags).</li><li><code>wrangler secret put</code> for sensitive values (e.g., <code>TOKEN_ENC_KEY</code>, OAuth credentials).</li></ul></li><li>Optional state: If token persistence is required in Workers, integrate KV/Durable Objects via a <code>TokenStorage</code> adapter (see Phase 10 notes below) and inject into the auth manager. Until then, tokens are ephemeral across isolates.</li></ul><hr><h2 id="koyeb-deployment-architecture" tabindex="-1">Koyeb Deployment Architecture <a class="header-anchor" href="#koyeb-deployment-architecture" aria-label="Permalink to &quot;Koyeb Deployment Architecture&quot;">​</a></h2><ul><li>Koyeb runs the Docker image. The platform sets <code>PORT</code>; the container listens on that port.</li><li>Scaling via Koyeb autoscaler based on CPU/latency; rollouts use rolling updates (min 1 healthy instance).</li><li>Health checks target <code>/health</code> with a short interval and small timeout. Failures trigger replacement.</li><li>Environment managed in Koyeb dashboard or <code>koyeb.yaml</code> (see deploy/koyeb/koyeb.yaml). Secrets stored as Koyeb Secrets.</li><li>Observability: STDOUT/STDERR logs stream to Koyeb; recommend JSON logs for machine parsing.</li></ul><hr><h2 id="ci-cd-pipeline-architecture" tabindex="-1">CI/CD Pipeline Architecture <a class="header-anchor" href="#ci-cd-pipeline-architecture" aria-label="Permalink to &quot;CI/CD Pipeline Architecture&quot;">​</a></h2><ul><li>GitHub Actions workflows: <ul><li><code>ci.yml</code> (PRs/push): lint, typecheck, build both targets, run tests (Node + Workers), and basic audit.</li><li><code>deploy.yml</code> (main/release): build multi‑arch image and push to GHCR; deploy Workers via Wrangler; trigger Koyeb rollout.</li></ul></li><li>Buildx multi-arch Docker builds: <code>linux/amd64</code> and <code>linux/arm64</code> using QEMU.</li><li>Security scans: <code>npm audit</code> as a baseline (non‑blocking); optional Snyk/CodeQL can be added later.</li><li>Provenance: annotate images with source ref, commit SHA, build timestamp (via labels/metadata action).</li></ul><hr><h2 id="environment-secrets-management" tabindex="-1">Environment &amp; Secrets Management <a class="header-anchor" href="#environment-secrets-management" aria-label="Permalink to &quot;Environment &amp; Secrets Management&quot;">​</a></h2><ul><li>Sources of configuration: <ol><li>CLI args (e.g., <code>--hosting.port=4000</code>)</li><li>Environment variables (EnvironmentManager maps <code>MASTER_HOSTING_*</code> and <code>PORT</code>)</li><li>Config files <code>config/default.json</code> and <code>config/&lt;env&gt;.json</code> (validated by JSON schema)</li></ol></li><li>Minimum required env vars by environment: <ul><li>All: <code>NODE_ENV</code>, <code>LOG_LEVEL</code>, <code>LOG_FORMAT</code> (json|plain), and optional <code>BASE_URL</code>/<code>MASTER_BASE_URL</code>.</li><li>OAuth: <code>TOKEN_ENC_KEY</code> (required in production; generates ephemeral dev key otherwise).</li><li>Hosting: <code>PORT</code> when provided by PaaS; otherwise <code>MASTER_HOSTING_PORT</code> defaults to 3000.</li></ul></li><li>Secrets handling: <ul><li>Docker: use orchestrator secret stores (Docker/Kubernetes/Compose). Do not bake secrets into image.</li><li>Workers: use <code>wrangler secret</code> for sensitive values; <code>vars</code> for non-sensitive.</li><li>Koyeb: use Koyeb Secrets and environment variables.</li></ul></li></ul><p>Feature flags (examples):</p><ul><li><code>FEATURE_METRICS_JSON=true</code> → expose JSON metrics endpoint (future extension).</li><li><code>FEATURE_REQUEST_LOGGING=true</code> → enrich access logs.</li></ul><hr><h2 id="monitoring-observability" tabindex="-1">Monitoring &amp; Observability <a class="header-anchor" href="#monitoring-observability" aria-label="Permalink to &quot;Monitoring &amp; Observability&quot;">​</a></h2><ul><li>Logging: <ul><li>Structured JSON logs by default in production, controlled via <code>LOG_FORMAT=json</code> and <code>LOG_LEVEL</code>.</li><li>Include correlation IDs where available; MDC-like <code>Logger.with({ correlationId })</code> supported.</li></ul></li><li>Metrics: <ul><li>Lightweight in-memory counters/gauges/histograms (<code>src/utils/monitoring.ts</code>).</li><li>Node/Docker/Koyeb: expose a <code>/metrics</code> JSON endpoint (recommended next step) for scraping or forwarding to Prometheus.</li><li>Workers: forward summary metrics to analytics/Logs or send to a metrics endpoint if needed.</li></ul></li><li>Health checks: <ul><li><code>GET /health</code> returns <code>{ ok: true }</code>. Add <code>/ready</code> if needed to gate traffic during warmup.</li></ul></li><li>Tracing (optional): <ul><li>Future: integrate OpenTelemetry SDK in Node runtime with OTLP exporter.</li><li>Workers: best-effort correlation using request IDs; optionally send spans via HTTP to a collector.</li></ul></li></ul><hr><h2 id="high-availability-scaling" tabindex="-1">High Availability &amp; Scaling <a class="header-anchor" href="#high-availability-scaling" aria-label="Permalink to &quot;High Availability &amp; Scaling&quot;">​</a></h2><ul><li>Edge entry: Cloudflare in front of Docker/Koyeb backends for caching/TLS and geo routing where applicable.</li><li>Koyeb autoscaling: baseline 2 replicas, scale on CPU &gt; 70% or p95 latency. Rolling updates with health checks.</li><li>Workers: global edge deployment, stateless handlers; consider Durable Objects for coordinated state if needed.</li><li>Failure domains: <ul><li>Graceful shutdown on SIGTERM; ephemeral state stored in memory only (OK for stateless operation).</li><li>Config hot‑reload on file changes (Node only) already present; changes to listening port require restart.</li></ul></li><li>Disaster recovery: immutable images in GHCR; rollback by redeploying older tag. Workers rollbacks via Wrangler versions.</li></ul><hr><h2 id="platform-specific-details" tabindex="-1">Platform-Specific Details <a class="header-anchor" href="#platform-specific-details" aria-label="Permalink to &quot;Platform-Specific Details&quot;">​</a></h2><h3 id="docker" tabindex="-1">Docker <a class="header-anchor" href="#docker" aria-label="Permalink to &quot;Docker&quot;">​</a></h3><ul><li>Build multi-arch images with Buildx; publish to GHCR.</li><li>Health check calls <code>/health</code> every 10s with a 3s timeout.</li><li>Resource guidance per container (starting point): CPU 0.25–1 vCPU, memory 256–512MB.</li><li>Local dev via Compose: bind-mount <code>config/</code> and expose port 3000.</li></ul><h3 id="cloudflare-workers" tabindex="-1">Cloudflare Workers <a class="header-anchor" href="#cloudflare-workers" aria-label="Permalink to &quot;Cloudflare Workers&quot;">​</a></h3><ul><li><code>wrangler.toml</code> defines staging and production environments.</li><li>Provide <code>MASTER_BASE_URL</code> (or <code>BASE_URL</code>) if OAuth callbacks need stable URLs behind Cloudflare.</li><li>Use <code>wrangler tail</code> for logs; consider Workers Analytics Engine for metrics.</li></ul><h3 id="koyeb" tabindex="-1">Koyeb <a class="header-anchor" href="#koyeb" aria-label="Permalink to &quot;Koyeb&quot;">​</a></h3><ul><li>Deploy the GHCR image; set environment <code>NODE_ENV=production</code>, <code>LOG_FORMAT=json</code>.</li><li>Koyeb sets <code>PORT</code>; the container entrypoint maps <code>PORT</code> to config port automatically.</li><li>Autoscaling and min instances defined in <code>deploy/koyeb/koyeb.yaml</code>.</li></ul><hr><h2 id="validation-testing-strategy-phase-9-integration" tabindex="-1">Validation &amp; Testing Strategy (Phase 9 Integration) <a class="header-anchor" href="#validation-testing-strategy-phase-9-integration" aria-label="Permalink to &quot;Validation &amp; Testing Strategy (Phase 9 Integration)&quot;">​</a></h2><ul><li>Reuse Node test suites via <code>npm test</code> and worker tests via <code>vitest -c vitest.worker.config.ts</code> in CI.</li><li>Smoke tests run post-deploy: <ul><li>Docker/Koyeb: cURL <code>/health</code> and <code>/capabilities</code>.</li><li>Workers: <code>wrangler deploy --dry-run</code> + <code>wrangler tail</code> checks or synthetic GET <code>/oauth/authorize</code> path with required query.</li></ul></li><li>Security checks: <code>npm audit</code> baseline in CI (non-blocking), optional enhancement with Snyk/CodeQL.</li></ul><hr><h2 id="rollout-release-management" tabindex="-1">Rollout &amp; Release Management <a class="header-anchor" href="#rollout-release-management" aria-label="Permalink to &quot;Rollout &amp; Release Management&quot;">​</a></h2><ul><li>Version labels embedded in Docker images (<code>org.opencontainers.image.version</code>) and exposed via <code>APP_VERSION</code> env.</li><li>Environments: <ul><li><code>staging</code>: manual approval before promotion; smaller instance counts.</li><li><code>production</code>: automatic on tagged releases; blue/green or rolling strategies per platform.</li></ul></li></ul><hr><h2 id="artifacts-added-in-phase-10" tabindex="-1">Artifacts Added in Phase 10 <a class="header-anchor" href="#artifacts-added-in-phase-10" aria-label="Permalink to &quot;Artifacts Added in Phase 10&quot;">​</a></h2><ul><li><code>deploy/docker/Dockerfile</code> — multi-stage, production‑ready image.</li><li><code>deploy/docker/docker-compose.yml</code> — local dev with hot-reload capability using <code>npm run dev</code> image override (optional).</li><li><code>deploy/cloudflare/wrangler.toml</code> — Workers configuration with staging/production envs.</li><li><code>deploy/koyeb/koyeb.yaml</code> — Koyeb service definition with autoscaling and health checks.</li><li><code>.github/workflows/ci.yml</code> and <code>.github/workflows/deploy.yml</code> — CI and CD pipelines.</li><li><code>.env.example</code> — environment and secrets reference.</li><li><code>deploy/README.md</code> — usage notes and platform-specific guidance.</li></ul><p>This architecture is intentionally conservative: it delivers production‑ready defaults and leaves extensibility hooks (metrics export, KV/DO storage, OpenTelemetry) for incremental adoption.</p>',52)]))}const p=o(l,[["render",r]]);export{m as __pageData,p as default};

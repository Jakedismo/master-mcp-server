import{_ as o,c as a,o as i,a6 as r}from"./chunks/framework.CHl2ywxc.js";const E=JSON.parse('{"title":"Environment Variables","description":"","frontmatter":{},"headers":[],"relativePath":"configuration/environment-variables.md","filePath":"configuration/environment-variables.md","lastUpdated":1755281500000}'),t={name:"configuration/environment-variables.md"};function c(d,e,n,l,s,_){return i(),a("div",null,e[0]||(e[0]=[r('<h1 id="environment-variables" tabindex="-1">Environment Variables <a class="header-anchor" href="#environment-variables" aria-label="Permalink to &quot;Environment Variables&quot;">​</a></h1><p>Environment variables can override configuration at load time. Key variables:</p><h2 id="hosting" tabindex="-1">Hosting <a class="header-anchor" href="#hosting" aria-label="Permalink to &quot;Hosting&quot;">​</a></h2><ul><li><code>MASTER_HOSTING_PLATFORM</code> → <code>hosting.platform</code></li><li><code>MASTER_HOSTING_PORT</code> → <code>hosting.port</code></li><li><code>MASTER_BASE_URL</code> → <code>hosting.base_url</code></li></ul><h2 id="logging" tabindex="-1">Logging <a class="header-anchor" href="#logging" aria-label="Permalink to &quot;Logging&quot;">​</a></h2><ul><li><code>MASTER_LOG_LEVEL</code> → <code>logging.level</code></li></ul><h2 id="master-oauth" tabindex="-1">Master OAuth <a class="header-anchor" href="#master-oauth" aria-label="Permalink to &quot;Master OAuth&quot;">​</a></h2><ul><li><code>MASTER_OAUTH_ISSUER</code> → <code>master_oauth.issuer</code></li><li><code>MASTER_OAUTH_AUTHORIZATION_ENDPOINT</code> → <code>master_oauth.authorization_endpoint</code></li><li><code>MASTER_OAUTH_TOKEN_ENDPOINT</code> → <code>master_oauth.token_endpoint</code></li><li><code>MASTER_OAUTH_JWKS_URI</code> → <code>master_oauth.jwks_uri</code></li><li><code>MASTER_OAUTH_CLIENT_ID</code> → <code>master_oauth.client_id</code></li><li><code>MASTER_OAUTH_CLIENT_SECRET</code> → <code>master_oauth.client_secret</code> (stored as <code>env:MASTER_OAUTH_CLIENT_SECRET</code>)</li><li><code>MASTER_OAUTH_REDIRECT_URI</code> → <code>master_oauth.redirect_uri</code></li><li><code>MASTER_OAUTH_SCOPES</code> → comma-separated list → <code>master_oauth.scopes[]</code></li><li><code>MASTER_OAUTH_AUDIENCE</code> → <code>master_oauth.audience</code></li></ul><h2 id="servers-bulk" tabindex="-1">Servers (bulk) <a class="header-anchor" href="#servers-bulk" aria-label="Permalink to &quot;Servers (bulk)&quot;">​</a></h2><ul><li><code>MASTER_SERVERS</code> → JSON array of servers</li><li><code>MASTER_SERVERS_YAML</code> → YAML array of servers</li></ul><h2 id="config-discovery-and-env" tabindex="-1">Config discovery and env <a class="header-anchor" href="#config-discovery-and-env" aria-label="Permalink to &quot;Config discovery and env&quot;">​</a></h2><ul><li><code>MASTER_CONFIG_PATH</code> → explicit path to YAML/JSON config file</li><li><code>MASTER_ENV</code> / <code>NODE_ENV</code> → selects env-specific overrides and affects runtime behavior</li></ul><h2 id="secrets-tokens" tabindex="-1">Secrets &amp; Tokens <a class="header-anchor" href="#secrets-tokens" aria-label="Permalink to &quot;Secrets &amp; Tokens&quot;">​</a></h2><ul><li><code>MASTER_CONFIG_KEY</code> (or <code>MASTER_SECRET_KEY</code>) → decrypts <code>enc:gcm:</code> config values</li><li><code>TOKEN_ENC_KEY</code> → encrypts stored delegated/proxy tokens (REQUIRED in production)</li></ul><p>See <code>.env.example</code> for a template.</p>',15)]))}const h=o(t,[["render",c]]);export{E as __pageData,h as default};

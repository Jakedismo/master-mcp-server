import{_ as a,C as n,c as l,o,a6 as i,j as h,a as e,G as r}from"./chunks/framework.CHl2ywxc.js";const F=JSON.parse('{"title":"Client Integration","description":"","frontmatter":{"title":"Client Integration"},"headers":[],"relativePath":"guides/client-integration.md","filePath":"guides/client-integration.md","lastUpdated":null}'),p={name:"guides/client-integration.md"};function d(k,s,c,u,g,E){const t=n("ApiPlayground");return o(),l("div",null,[s[2]||(s[2]=i(`<h1 id="client-integration" tabindex="-1">Client Integration <a class="header-anchor" href="#client-integration" aria-label="Permalink to &quot;Client Integration&quot;">​</a></h1><p>Connect your MCP clients to the Master MCP Server and verify end-to-end flows.</p><blockquote><p>Note: The Master MCP Server exposes HTTP endpoints for tools and resources (e.g., <code>/mcp/tools/call</code>). Custom clients can integrate directly over HTTP. For GUI clients like Claude Desktop, support for HTTP/remote servers may vary by version. If direct HTTP is unsupported, consider a small bridge (stdio → HTTP) or use the Node runtime directly inside your app.</p></blockquote><h2 id="custom-clients-http" tabindex="-1">Custom Clients (HTTP) <a class="header-anchor" href="#custom-clients-http" aria-label="Permalink to &quot;Custom Clients (HTTP)&quot;">​</a></h2><p>Use any HTTP-capable client. Examples below:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -H</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;content-type: application/json&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -X</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> POST</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://localhost:3000/mcp/tools/list</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;{&quot;type&quot;:&quot;list_tools&quot;}&#39;</span></span></code></pre></div><p>Node (fetch):</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fetch </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node-fetch&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://localhost:3000/mcp/tools/call&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  method: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;POST&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  headers: { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;content-type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;application/json&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, authorization: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Bearer YOUR_CLIENT_TOKEN&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  body: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;search.query&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, arguments: { q: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div>`,8)),h("p",null,[s[0]||(s[0]=e("See also: Getting Started → Quick Start and the ",-1)),r(t),s[1]||(s[1]=e(" on the landing page.",-1))]),s[3]||(s[3]=i('<h2 id="claude-desktop-guidance" tabindex="-1">Claude Desktop (Guidance) <a class="header-anchor" href="#claude-desktop-guidance" aria-label="Permalink to &quot;Claude Desktop (Guidance)&quot;">​</a></h2><p>Claude Desktop supports MCP servers via configuration. The exact configuration and supported transports can change; consult the latest Claude Desktop documentation.</p><p>Two approaches:</p><ul><li>If your Claude Desktop version supports remote/HTTP MCP servers, configure it to point at your master base URL (e.g., <code>http://localhost:3000</code>) and include a bearer token if required.</li><li>Otherwise, run a small stdio bridge that speaks MCP to the client and forwards requests to the master HTTP endpoints. The bridge should: <ul><li>Respond to tool/resource listing using the master’s <code>/mcp/*/list</code> endpoints</li><li>Forward tool calls and resource reads to <code>/mcp/tools/call</code> and <code>/mcp/resources/read</code></li><li>Map names like <code>serverId.toolName</code> consistently</li></ul></li></ul><blockquote><p>Tip: Keep your bridge stateless. Let the master handle routing, retries, and auth strategies.</p></blockquote><h2 id="testing-connections" tabindex="-1">Testing Connections <a class="header-anchor" href="#testing-connections" aria-label="Permalink to &quot;Testing Connections&quot;">​</a></h2><ul><li>Health: <code>GET /health</code> → <code>{ ok: true }</code></li><li>Capabilities: <code>GET /capabilities</code> → aggregated tools/resources</li><li>Tools/Resources: use the POST endpoints under <code>/mcp/*</code></li></ul><h2 id="troubleshooting" tabindex="-1">Troubleshooting <a class="header-anchor" href="#troubleshooting" aria-label="Permalink to &quot;Troubleshooting&quot;">​</a></h2><ul><li>401/403: ensure your Authorization header is present and matches backend expectations.</li><li>Missing tools/resources: confirm the backend servers are healthy and listed in config.</li><li>Delegated OAuth required: follow the flow at <code>/oauth/authorize?server_id=&lt;id&gt;</code>.</li></ul>',9))])}const C=a(p,[["render",d]]);export{F as __pageData,C as default};

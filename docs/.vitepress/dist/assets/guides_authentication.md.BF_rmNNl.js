import{_ as e,C as t,c as n,o as h,a6 as i,G as l}from"./chunks/framework.CHl2ywxc.js";const u=JSON.parse('{"title":"Authentication Guide","description":"","frontmatter":{},"headers":[],"relativePath":"guides/authentication.md","filePath":"guides/authentication.md","lastUpdated":1755281500000}'),r={name:"guides/authentication.md"};function p(k,s,o,d,c,E){const a=t("AuthFlowDemo");return h(),n("div",null,[s[0]||(s[0]=i('<h1 id="authentication-guide" tabindex="-1">Authentication Guide <a class="header-anchor" href="#authentication-guide" aria-label="Permalink to &quot;Authentication Guide&quot;">​</a></h1><p>Master MCP Server supports multiple authentication strategies between the client (master) and each backend server.</p><h2 id="strategies" tabindex="-1">Strategies <a class="header-anchor" href="#strategies" aria-label="Permalink to &quot;Strategies&quot;">​</a></h2><ul><li>master_oauth: Pass the client token from the master directly to the backend.</li><li>delegate_oauth: Instruct the client to complete an OAuth flow against the backend provider, then store a backend token.</li><li>proxy_oauth: Use the master to refresh and proxy backend tokens, falling back to pass-through.</li><li>bypass_auth: No auth headers are sent to the backend.</li></ul><p>Configure per-server via <code>servers[].auth_strategy</code> and optional <code>servers[].auth_config</code>.</p>',5)),l(a),s[1]||(s[1]=i(`<div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">servers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">github-tools</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">local</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    auth_strategy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">delegate_oauth</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    auth_config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      provider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">github</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      authorization_endpoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">https://github.com/login/oauth/authorize</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      token_endpoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">https://github.com/login/oauth/access_token</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      client_id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${GITHUB_CLIENT_ID}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      client_secret</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">env:GITHUB_CLIENT_SECRET</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      scopes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">repo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">read:user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4010</span></span></code></pre></div><h2 id="flow-overview" tabindex="-1">Flow Overview <a class="header-anchor" href="#flow-overview" aria-label="Permalink to &quot;Flow Overview&quot;">​</a></h2><ol><li>Client calls a tool/resource via master with <code>Authorization: Bearer &lt;client_token&gt;</code>.</li><li>Master determines server strategy via <code>MultiAuthManager</code>.</li><li>If delegation is required, master responds with <code>{ type: &#39;oauth_delegation&#39;, ... }</code> metadata.</li><li>Client opens <code>GET /oauth/authorize?server_id=&lt;id&gt;</code> to initiate the auth code + PKCE flow.</li><li>Redirect back to <code>GET /oauth/callback</code> stores the backend token (associated with client token + server id).</li><li>Retries to the backend now include <code>Authorization: Bearer &lt;server_token&gt;</code> as needed.</li></ol><h2 id="endpoints" tabindex="-1">Endpoints <a class="header-anchor" href="#endpoints" aria-label="Permalink to &quot;Endpoints&quot;">​</a></h2><ul><li><code>GET /oauth/authorize</code> → Starts flow; query: <code>server_id</code>, optional <code>provider</code> if preconfigured.</li><li><code>GET /oauth/callback</code> → Exchanges code for token and stores it.</li><li><code>GET /oauth/success</code> + <code>GET /oauth/error</code> → Result pages.</li></ul><p>These are mounted automatically in the Node runtime (<code>src/index.ts</code>) and can be used in Workers via <code>OAuthFlowController.handleRequest()</code>.</p><h2 id="customizing-auth" tabindex="-1">Customizing Auth <a class="header-anchor" href="#customizing-auth" aria-label="Permalink to &quot;Customizing Auth&quot;">​</a></h2><p>Attach a custom <code>MultiAuthManager</code> instance to the <code>MasterServer</code>:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { MasterServer } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;../src/server/master-server&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { MultiAuthManager } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;../src/auth/multi-auth-manager&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> master</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MasterServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> auth</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MultiAuthManager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config.master_oauth)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">auth.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">registerServerAuth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;github-tools&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;delegate_oauth&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* provider config */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">master.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">attachAuthManager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(auth)</span></span></code></pre></div><p>See <code>examples/custom-auth</code> for a working example.</p>`,10))])}const y=e(r,[["render",p]]);export{u as __pageData,y as default};

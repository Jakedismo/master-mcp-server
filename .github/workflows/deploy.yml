name: Deploy

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  docker:
    name: Build and Push Docker (multi-arch)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=Master MCP Server
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: deploy/docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  workers:
    name: Deploy Cloudflare Workers
    runs-on: ubuntu-latest
    needs: [ docker ]
    if: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v') }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Publish to Workers (production)
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy --env production

  koyeb:
    name: Trigger Koyeb Rollout
    runs-on: ubuntu-latest
    needs: [ docker ]
    if: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v') }}
    steps:
      - name: Determine image tag
        id: tag
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "tag=latest" >> $GITHUB_OUTPUT
          fi

      - name: Trigger rollout via Koyeb API
        env:
          KOYEB_TOKEN: ${{ secrets.KOYEB_API_TOKEN }}
          IMAGE: ghcr.io/${{ github.repository }}:${{ steps.tag.outputs.tag }}
        run: |
          if [ -z "$KOYEB_TOKEN" ]; then
            echo "KOYEB_API_TOKEN not set; skipping Koyeb deployment"
            exit 0
          fi
          echo "Would deploy image: $IMAGE"
          echo "Please configure service update call against Koyeb API here."
          # Example placeholder (replace IDs accordingly):
          # curl -X POST \
          #   -H "Authorization: Bearer $KOYEB_TOKEN" \
          #   -H "Content-Type: application/json" \
          #   https://app.koyeb.com/v1/services/<SERVICE_ID>/deployments \
          #   -d '{"docker":{"image":"'$IMAGE'"}}'

